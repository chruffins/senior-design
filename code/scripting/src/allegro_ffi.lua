-- Generated by generate_luajit_ffi.py
-- Release: None-None

local ffi = require 'ffi'

local allegro = {}

-- CONSTANTS
allegro.ALLEGRO_ACC_ALPHA_SIZE = 11
allegro.ALLEGRO_ACC_BLUE_SIZE = 10
allegro.ALLEGRO_ACC_GREEN_SIZE = 9
allegro.ALLEGRO_ACC_RED_SIZE = 8
allegro.ALLEGRO_ADD = 0
allegro.ALLEGRO_ALIGN_CENTER = 1
allegro.ALLEGRO_ALIGN_CENTRE = 1
allegro.ALLEGRO_ALIGN_INTEGER = 4
allegro.ALLEGRO_ALIGN_LEFT = 0
allegro.ALLEGRO_ALIGN_RIGHT = 2
allegro.ALLEGRO_ALPHA = 2
allegro.ALLEGRO_ALPHA_FUNCTION = 20
allegro.ALLEGRO_ALPHA_SHIFT = 7
allegro.ALLEGRO_ALPHA_SIZE = 3
allegro.ALLEGRO_ALPHA_TEST = 16
allegro.ALLEGRO_ALPHA_TEST_VALUE = 21
allegro.ALLEGRO_AUDIO_DEPTH_FLOAT32 = 3
allegro.ALLEGRO_AUDIO_DEPTH_INT16 = 1
allegro.ALLEGRO_AUDIO_DEPTH_INT24 = 2
allegro.ALLEGRO_AUDIO_DEPTH_INT8 = 0
allegro.ALLEGRO_AUDIO_DEPTH_UINT16 = 9
allegro.ALLEGRO_AUDIO_DEPTH_UINT24 = 10
allegro.ALLEGRO_AUDIO_DEPTH_UINT8 = 8
allegro.ALLEGRO_AUDIO_DEPTH_UNSIGNED = 8
allegro.ALLEGRO_AUTO_CONVERT_BITMAPS = 31
allegro.ALLEGRO_AUX_BUFFERS = 13
allegro.ALLEGRO_BLUE_SHIFT = 6
allegro.ALLEGRO_BLUE_SIZE = 2
allegro.ALLEGRO_CAN_DRAW_INTO_BITMAP = 29
allegro.ALLEGRO_CHANNEL_CONF_1 = 16
allegro.ALLEGRO_CHANNEL_CONF_2 = 32
allegro.ALLEGRO_CHANNEL_CONF_3 = 48
allegro.ALLEGRO_CHANNEL_CONF_4 = 64
allegro.ALLEGRO_CHANNEL_CONF_5_1 = 81
allegro.ALLEGRO_CHANNEL_CONF_6_1 = 97
allegro.ALLEGRO_CHANNEL_CONF_7_1 = 113
allegro.ALLEGRO_COLOR_SIZE = 14
allegro.ALLEGRO_COMPATIBLE_DISPLAY = 24
allegro.ALLEGRO_CONST_COLOR = 8
allegro.ALLEGRO_CONVERT_BITMAP = 4096
allegro.ALLEGRO_DATE = 20231119
allegro.ALLEGRO_DEFAULT_DISPLAY_ADAPTER = -1
allegro.ALLEGRO_DEFAULT_SHADER_PLATFORM = 35
allegro.ALLEGRO_DEPTH_FUNCTION = 19
allegro.ALLEGRO_DEPTH_SIZE = 15
allegro.ALLEGRO_DEPTH_TEST = 18
allegro.ALLEGRO_DESKTOP_OPENGL = 0
allegro.ALLEGRO_DEST_COLOR = 5
allegro.ALLEGRO_DEST_MINUS_SRC = 2
allegro.ALLEGRO_DIRECT3D_INTERNAL = 8
allegro.ALLEGRO_DISPLAY_OPTIONS_COUNT = 36
allegro.ALLEGRO_DISPLAY_ORIENTATION_0_DEGREES = 1
allegro.ALLEGRO_DISPLAY_ORIENTATION_180_DEGREES = 4
allegro.ALLEGRO_DISPLAY_ORIENTATION_270_DEGREES = 8
allegro.ALLEGRO_DISPLAY_ORIENTATION_90_DEGREES = 2
allegro.ALLEGRO_DISPLAY_ORIENTATION_ALL = 15
allegro.ALLEGRO_DISPLAY_ORIENTATION_FACE_DOWN = 32
allegro.ALLEGRO_DISPLAY_ORIENTATION_FACE_UP = 16
allegro.ALLEGRO_DISPLAY_ORIENTATION_LANDSCAPE = 10
allegro.ALLEGRO_DISPLAY_ORIENTATION_PORTRAIT = 5
allegro.ALLEGRO_DISPLAY_ORIENTATION_UNKNOWN = 0
allegro.ALLEGRO_DONTCARE = 0
allegro.ALLEGRO_EVENT_AUDIO_STREAM_FINISHED = 514
allegro.ALLEGRO_EVENT_AUDIO_STREAM_FRAGMENT = 513
allegro.ALLEGRO_EVENT_DISPLAY_CLOSE = 42
allegro.ALLEGRO_EVENT_DISPLAY_CONNECTED = 60
allegro.ALLEGRO_EVENT_DISPLAY_DISCONNECTED = 61
allegro.ALLEGRO_EVENT_DISPLAY_EXPOSE = 40
allegro.ALLEGRO_EVENT_DISPLAY_FOUND = 44
allegro.ALLEGRO_EVENT_DISPLAY_HALT_DRAWING = 48
allegro.ALLEGRO_EVENT_DISPLAY_LOST = 43
allegro.ALLEGRO_EVENT_DISPLAY_ORIENTATION = 47
allegro.ALLEGRO_EVENT_DISPLAY_RESIZE = 41
allegro.ALLEGRO_EVENT_DISPLAY_RESUME_DRAWING = 49
allegro.ALLEGRO_EVENT_DISPLAY_SWITCH_IN = 45
allegro.ALLEGRO_EVENT_DISPLAY_SWITCH_OUT = 46
allegro.ALLEGRO_EVENT_DROP = 62
allegro.ALLEGRO_EVENT_JOYSTICK_AXIS = 1
allegro.ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN = 2
allegro.ALLEGRO_EVENT_JOYSTICK_BUTTON_UP = 3
allegro.ALLEGRO_EVENT_JOYSTICK_CONFIGURATION = 4
allegro.ALLEGRO_EVENT_KEY_CHAR = 11
allegro.ALLEGRO_EVENT_KEY_DOWN = 10
allegro.ALLEGRO_EVENT_KEY_UP = 12
allegro.ALLEGRO_EVENT_MENU_CLICK = 601
allegro.ALLEGRO_EVENT_MOUSE_AXES = 20
allegro.ALLEGRO_EVENT_MOUSE_BUTTON_DOWN = 21
allegro.ALLEGRO_EVENT_MOUSE_BUTTON_UP = 22
allegro.ALLEGRO_EVENT_MOUSE_ENTER_DISPLAY = 23
allegro.ALLEGRO_EVENT_MOUSE_LEAVE_DISPLAY = 24
allegro.ALLEGRO_EVENT_MOUSE_WARPED = 25
allegro.ALLEGRO_EVENT_NATIVE_DIALOG_CLOSE = 600
allegro.ALLEGRO_EVENT_TIMER = 30
allegro.ALLEGRO_EVENT_TOUCH_BEGIN = 50
allegro.ALLEGRO_EVENT_TOUCH_CANCEL = 53
allegro.ALLEGRO_EVENT_TOUCH_END = 51
allegro.ALLEGRO_EVENT_TOUCH_MOVE = 52
allegro.ALLEGRO_EVENT_VIDEO_FINISHED = 551
allegro.ALLEGRO_EVENT_VIDEO_FRAME_SHOW = 550
allegro.ALLEGRO_EXENAME_PATH = 6
allegro.ALLEGRO_FILECHOOSER_FILE_MUST_EXIST = 1
allegro.ALLEGRO_FILECHOOSER_FOLDER = 4
allegro.ALLEGRO_FILECHOOSER_MULTIPLE = 32
allegro.ALLEGRO_FILECHOOSER_PICTURES = 8
allegro.ALLEGRO_FILECHOOSER_SAVE = 2
allegro.ALLEGRO_FILECHOOSER_SHOW_HIDDEN = 16
allegro.ALLEGRO_FILEMODE_EXECUTE = 4
allegro.ALLEGRO_FILEMODE_HIDDEN = 8
allegro.ALLEGRO_FILEMODE_ISDIR = 32
allegro.ALLEGRO_FILEMODE_ISFILE = 16
allegro.ALLEGRO_FILEMODE_READ = 1
allegro.ALLEGRO_FILEMODE_WRITE = 2
allegro.ALLEGRO_FLIP_HORIZONTAL = 1
allegro.ALLEGRO_FLIP_VERTICAL = 2
allegro.ALLEGRO_FLOAT_COLOR = 20
allegro.ALLEGRO_FLOAT_DEPTH = 21
allegro.ALLEGRO_FORCE_LOCKING = 4
allegro.ALLEGRO_FOR_EACH_FS_ENTRY_ERROR = -1
allegro.ALLEGRO_FOR_EACH_FS_ENTRY_OK = 0
allegro.ALLEGRO_FOR_EACH_FS_ENTRY_SKIP = 1
allegro.ALLEGRO_FOR_EACH_FS_ENTRY_STOP = 2
allegro.ALLEGRO_FRAMELESS = 32
allegro.ALLEGRO_FULLSCREEN = 2
allegro.ALLEGRO_FULLSCREEN_WINDOW = 512
allegro.ALLEGRO_GENERATE_EXPOSE_EVENTS = 64
allegro.ALLEGRO_GREEN_SHIFT = 5
allegro.ALLEGRO_GREEN_SIZE = 1
allegro.ALLEGRO_GTK_TOPLEVEL_INTERNAL = 4096
allegro.ALLEGRO_INVERSE_ALPHA = 3
allegro.ALLEGRO_INVERSE_CONST_COLOR = 9
allegro.ALLEGRO_INVERSE_DEST_COLOR = 7
allegro.ALLEGRO_INVERSE_SRC_COLOR = 6
allegro.ALLEGRO_JOYFLAG_ANALOGUE = 2
allegro.ALLEGRO_JOYFLAG_DIGITAL = 1
allegro.ALLEGRO_KEEP_BITMAP_FORMAT = 2
allegro.ALLEGRO_KEEP_INDEX = 2048
allegro.ALLEGRO_KEYMOD_ACCENT1 = 4096
allegro.ALLEGRO_KEYMOD_ACCENT2 = 8192
allegro.ALLEGRO_KEYMOD_ACCENT3 = 16384
allegro.ALLEGRO_KEYMOD_ACCENT4 = 32768
allegro.ALLEGRO_KEYMOD_ALT = 4
allegro.ALLEGRO_KEYMOD_ALTGR = 64
allegro.ALLEGRO_KEYMOD_CAPSLOCK = 1024
allegro.ALLEGRO_KEYMOD_COMMAND = 128
allegro.ALLEGRO_KEYMOD_CTRL = 2
allegro.ALLEGRO_KEYMOD_INALTSEQ = 2048
allegro.ALLEGRO_KEYMOD_LWIN = 8
allegro.ALLEGRO_KEYMOD_MENU = 32
allegro.ALLEGRO_KEYMOD_NUMLOCK = 512
allegro.ALLEGRO_KEYMOD_RWIN = 16
allegro.ALLEGRO_KEYMOD_SCROLLLOCK = 256
allegro.ALLEGRO_KEYMOD_SHIFT = 1
allegro.ALLEGRO_KEY_0 = 27
allegro.ALLEGRO_KEY_1 = 28
allegro.ALLEGRO_KEY_2 = 29
allegro.ALLEGRO_KEY_3 = 30
allegro.ALLEGRO_KEY_4 = 31
allegro.ALLEGRO_KEY_5 = 32
allegro.ALLEGRO_KEY_6 = 33
allegro.ALLEGRO_KEY_7 = 34
allegro.ALLEGRO_KEY_8 = 35
allegro.ALLEGRO_KEY_9 = 36
allegro.ALLEGRO_KEY_A = 1
allegro.ALLEGRO_KEY_ABNT_C1 = 94
allegro.ALLEGRO_KEY_ALT = 219
allegro.ALLEGRO_KEY_ALTGR = 220
allegro.ALLEGRO_KEY_AT = 99
allegro.ALLEGRO_KEY_B = 2
allegro.ALLEGRO_KEY_BACK = 107
allegro.ALLEGRO_KEY_BACKQUOTE = 104
allegro.ALLEGRO_KEY_BACKSLASH = 70
allegro.ALLEGRO_KEY_BACKSLASH2 = 71
allegro.ALLEGRO_KEY_BACKSPACE = 63
allegro.ALLEGRO_KEY_BUTTON_A = 124
allegro.ALLEGRO_KEY_BUTTON_B = 125
allegro.ALLEGRO_KEY_BUTTON_L1 = 120
allegro.ALLEGRO_KEY_BUTTON_L2 = 122
allegro.ALLEGRO_KEY_BUTTON_R1 = 121
allegro.ALLEGRO_KEY_BUTTON_R2 = 123
allegro.ALLEGRO_KEY_BUTTON_X = 112
allegro.ALLEGRO_KEY_BUTTON_Y = 113
allegro.ALLEGRO_KEY_C = 3
allegro.ALLEGRO_KEY_CAPSLOCK = 226
allegro.ALLEGRO_KEY_CIRCUMFLEX = 100
allegro.ALLEGRO_KEY_CLOSEBRACE = 66
allegro.ALLEGRO_KEY_COLON2 = 101
allegro.ALLEGRO_KEY_COMMA = 72
allegro.ALLEGRO_KEY_COMMAND = 106
allegro.ALLEGRO_KEY_CONVERT = 97
allegro.ALLEGRO_KEY_D = 4
allegro.ALLEGRO_KEY_DELETE = 77
allegro.ALLEGRO_KEY_DOWN = 85
allegro.ALLEGRO_KEY_DPAD_CENTER = 111
allegro.ALLEGRO_KEY_DPAD_DOWN = 115
allegro.ALLEGRO_KEY_DPAD_LEFT = 116
allegro.ALLEGRO_KEY_DPAD_RIGHT = 117
allegro.ALLEGRO_KEY_DPAD_UP = 114
allegro.ALLEGRO_KEY_E = 5
allegro.ALLEGRO_KEY_END = 79
allegro.ALLEGRO_KEY_ENTER = 67
allegro.ALLEGRO_KEY_EQUALS = 62
allegro.ALLEGRO_KEY_ESCAPE = 59
allegro.ALLEGRO_KEY_F = 6
allegro.ALLEGRO_KEY_F1 = 47
allegro.ALLEGRO_KEY_F10 = 56
allegro.ALLEGRO_KEY_F11 = 57
allegro.ALLEGRO_KEY_F12 = 58
allegro.ALLEGRO_KEY_F2 = 48
allegro.ALLEGRO_KEY_F3 = 49
allegro.ALLEGRO_KEY_F4 = 50
allegro.ALLEGRO_KEY_F5 = 51
allegro.ALLEGRO_KEY_F6 = 52
allegro.ALLEGRO_KEY_F7 = 53
allegro.ALLEGRO_KEY_F8 = 54
allegro.ALLEGRO_KEY_F9 = 55
allegro.ALLEGRO_KEY_FULLSTOP = 73
allegro.ALLEGRO_KEY_G = 7
allegro.ALLEGRO_KEY_H = 8
allegro.ALLEGRO_KEY_HOME = 78
allegro.ALLEGRO_KEY_I = 9
allegro.ALLEGRO_KEY_INSERT = 76
allegro.ALLEGRO_KEY_J = 10
allegro.ALLEGRO_KEY_K = 11
allegro.ALLEGRO_KEY_KANA = 96
allegro.ALLEGRO_KEY_KANJI = 102
allegro.ALLEGRO_KEY_L = 12
allegro.ALLEGRO_KEY_LCTRL = 217
allegro.ALLEGRO_KEY_LEFT = 82
allegro.ALLEGRO_KEY_LSHIFT = 215
allegro.ALLEGRO_KEY_LWIN = 221
allegro.ALLEGRO_KEY_M = 13
allegro.ALLEGRO_KEY_MAX = 227
allegro.ALLEGRO_KEY_MENU = 223
allegro.ALLEGRO_KEY_MINUS = 61
allegro.ALLEGRO_KEY_MODIFIERS = 215
allegro.ALLEGRO_KEY_N = 14
allegro.ALLEGRO_KEY_NOCONVERT = 98
allegro.ALLEGRO_KEY_NUMLOCK = 225
allegro.ALLEGRO_KEY_O = 15
allegro.ALLEGRO_KEY_OPENBRACE = 65
allegro.ALLEGRO_KEY_P = 16
allegro.ALLEGRO_KEY_PAD_0 = 37
allegro.ALLEGRO_KEY_PAD_1 = 38
allegro.ALLEGRO_KEY_PAD_2 = 39
allegro.ALLEGRO_KEY_PAD_3 = 40
allegro.ALLEGRO_KEY_PAD_4 = 41
allegro.ALLEGRO_KEY_PAD_5 = 42
allegro.ALLEGRO_KEY_PAD_6 = 43
allegro.ALLEGRO_KEY_PAD_7 = 44
allegro.ALLEGRO_KEY_PAD_8 = 45
allegro.ALLEGRO_KEY_PAD_9 = 46
allegro.ALLEGRO_KEY_PAD_ASTERISK = 87
allegro.ALLEGRO_KEY_PAD_DELETE = 90
allegro.ALLEGRO_KEY_PAD_ENTER = 91
allegro.ALLEGRO_KEY_PAD_EQUALS = 103
allegro.ALLEGRO_KEY_PAD_MINUS = 88
allegro.ALLEGRO_KEY_PAD_PLUS = 89
allegro.ALLEGRO_KEY_PAD_SLASH = 86
allegro.ALLEGRO_KEY_PAUSE = 93
allegro.ALLEGRO_KEY_PGDN = 81
allegro.ALLEGRO_KEY_PGUP = 80
allegro.ALLEGRO_KEY_PRINTSCREEN = 92
allegro.ALLEGRO_KEY_Q = 17
allegro.ALLEGRO_KEY_QUOTE = 69
allegro.ALLEGRO_KEY_R = 18
allegro.ALLEGRO_KEY_RCTRL = 218
allegro.ALLEGRO_KEY_RIGHT = 83
allegro.ALLEGRO_KEY_RSHIFT = 216
allegro.ALLEGRO_KEY_RWIN = 222
allegro.ALLEGRO_KEY_S = 19
allegro.ALLEGRO_KEY_SCROLLLOCK = 224
allegro.ALLEGRO_KEY_SEARCH = 110
allegro.ALLEGRO_KEY_SELECT = 118
allegro.ALLEGRO_KEY_SEMICOLON = 68
allegro.ALLEGRO_KEY_SEMICOLON2 = 105
allegro.ALLEGRO_KEY_SLASH = 74
allegro.ALLEGRO_KEY_SPACE = 75
allegro.ALLEGRO_KEY_START = 119
allegro.ALLEGRO_KEY_T = 20
allegro.ALLEGRO_KEY_TAB = 64
allegro.ALLEGRO_KEY_THUMBL = 126
allegro.ALLEGRO_KEY_THUMBR = 127
allegro.ALLEGRO_KEY_TILDE = 60
allegro.ALLEGRO_KEY_U = 21
allegro.ALLEGRO_KEY_UNKNOWN = 128
allegro.ALLEGRO_KEY_UP = 84
allegro.ALLEGRO_KEY_V = 22
allegro.ALLEGRO_KEY_VOLUME_DOWN = 109
allegro.ALLEGRO_KEY_VOLUME_UP = 108
allegro.ALLEGRO_KEY_W = 23
allegro.ALLEGRO_KEY_X = 24
allegro.ALLEGRO_KEY_Y = 25
allegro.ALLEGRO_KEY_YEN = 95
allegro.ALLEGRO_KEY_Z = 26
allegro.ALLEGRO_LAST_PATH = 7
allegro.ALLEGRO_LINE_CAP_CLOSED = 4
allegro.ALLEGRO_LINE_CAP_NONE = 0
allegro.ALLEGRO_LINE_CAP_ROUND = 2
allegro.ALLEGRO_LINE_CAP_SQUARE = 1
allegro.ALLEGRO_LINE_CAP_TRIANGLE = 3
allegro.ALLEGRO_LINE_JOIN_BEVEL = 1
allegro.ALLEGRO_LINE_JOIN_MITER = 3
allegro.ALLEGRO_LINE_JOIN_MITRE = 3
allegro.ALLEGRO_LINE_JOIN_NONE = 0
allegro.ALLEGRO_LINE_JOIN_ROUND = 2
allegro.ALLEGRO_LOCK_READONLY = 1
allegro.ALLEGRO_LOCK_READWRITE = 0
allegro.ALLEGRO_LOCK_WRITEONLY = 2
allegro.ALLEGRO_MAG_LINEAR = 128
allegro.ALLEGRO_MASK_ALPHA = 8
allegro.ALLEGRO_MASK_BLUE = 4
allegro.ALLEGRO_MASK_DEPTH = 16
allegro.ALLEGRO_MASK_GREEN = 2
allegro.ALLEGRO_MASK_RED = 1
allegro.ALLEGRO_MASK_RGB = 7
allegro.ALLEGRO_MASK_RGBA = 15
allegro.ALLEGRO_MAXIMIZED = 8192
allegro.ALLEGRO_MAX_BITMAP_SIZE = 27
allegro.ALLEGRO_MAX_CHANNELS = 8
allegro.ALLEGRO_MEMORY_BITMAP = 1
allegro.ALLEGRO_MENU_ITEM_CHECKBOX = 1
allegro.ALLEGRO_MENU_ITEM_CHECKED = 2
allegro.ALLEGRO_MENU_ITEM_DISABLED = 4
allegro.ALLEGRO_MENU_ITEM_ENABLED = 0
allegro.ALLEGRO_MESSAGEBOX_ERROR = 2
allegro.ALLEGRO_MESSAGEBOX_OK_CANCEL = 4
allegro.ALLEGRO_MESSAGEBOX_QUESTION = 16
allegro.ALLEGRO_MESSAGEBOX_WARN = 1
allegro.ALLEGRO_MESSAGEBOX_YES_NO = 8
allegro.ALLEGRO_MINIMIZED = 1024
allegro.ALLEGRO_MIN_LINEAR = 64
allegro.ALLEGRO_MIPMAP = 256
allegro.ALLEGRO_MIXER_QUALITY_CUBIC = 274
allegro.ALLEGRO_MIXER_QUALITY_LINEAR = 273
allegro.ALLEGRO_MIXER_QUALITY_POINT = 272
allegro.ALLEGRO_MOUSE_MAX_EXTRA_AXES = 4
allegro.ALLEGRO_NEW_WINDOW_TITLE_MAX_SIZE = 255
allegro.ALLEGRO_NOFRAME = 32
allegro.ALLEGRO_NO_KERNING = -1
allegro.ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512
allegro.ALLEGRO_NO_PRESERVE_TEXTURE = 8
allegro.ALLEGRO_NUM_BLEND_MODES = 10
allegro.ALLEGRO_NUM_BLEND_OPERATIONS = 3
allegro.ALLEGRO_NUM_PIXEL_FORMATS = 31
allegro.ALLEGRO_NUM_SYSTEM_MOUSE_CURSORS = 20
allegro.ALLEGRO_ONE = 1
allegro.ALLEGRO_OPENGL = 4
allegro.ALLEGRO_OPENGL_3_0 = 128
allegro.ALLEGRO_OPENGL_ES = 1
allegro.ALLEGRO_OPENGL_ES_PROFILE = 16384
allegro.ALLEGRO_OPENGL_FORWARD_COMPATIBLE = 256
allegro.ALLEGRO_OPENGL_MAJOR_VERSION = 33
allegro.ALLEGRO_OPENGL_MINOR_VERSION = 34
allegro.ALLEGRO_PI = 3.141592653589793
allegro.ALLEGRO_PIXEL_FORMAT_ABGR_8888 = 17
allegro.ALLEGRO_PIXEL_FORMAT_ABGR_8888_LE = 25
allegro.ALLEGRO_PIXEL_FORMAT_ABGR_F32 = 24
allegro.ALLEGRO_PIXEL_FORMAT_ANY = 0
allegro.ALLEGRO_PIXEL_FORMAT_ANY_15_NO_ALPHA = 3
allegro.ALLEGRO_PIXEL_FORMAT_ANY_16_NO_ALPHA = 4
allegro.ALLEGRO_PIXEL_FORMAT_ANY_16_WITH_ALPHA = 5
allegro.ALLEGRO_PIXEL_FORMAT_ANY_24_NO_ALPHA = 6
allegro.ALLEGRO_PIXEL_FORMAT_ANY_32_NO_ALPHA = 7
allegro.ALLEGRO_PIXEL_FORMAT_ANY_32_WITH_ALPHA = 8
allegro.ALLEGRO_PIXEL_FORMAT_ANY_NO_ALPHA = 1
allegro.ALLEGRO_PIXEL_FORMAT_ANY_WITH_ALPHA = 2
allegro.ALLEGRO_PIXEL_FORMAT_ARGB_1555 = 16
allegro.ALLEGRO_PIXEL_FORMAT_ARGB_4444 = 11
allegro.ALLEGRO_PIXEL_FORMAT_ARGB_8888 = 9
allegro.ALLEGRO_PIXEL_FORMAT_BGR_555 = 21
allegro.ALLEGRO_PIXEL_FORMAT_BGR_565 = 20
allegro.ALLEGRO_PIXEL_FORMAT_BGR_888 = 19
allegro.ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT1 = 28
allegro.ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT3 = 29
allegro.ALLEGRO_PIXEL_FORMAT_COMPRESSED_RGBA_DXT5 = 30
allegro.ALLEGRO_PIXEL_FORMAT_RGBA_4444 = 26
allegro.ALLEGRO_PIXEL_FORMAT_RGBA_5551 = 15
allegro.ALLEGRO_PIXEL_FORMAT_RGBA_8888 = 10
allegro.ALLEGRO_PIXEL_FORMAT_RGBX_8888 = 22
allegro.ALLEGRO_PIXEL_FORMAT_RGB_555 = 14
allegro.ALLEGRO_PIXEL_FORMAT_RGB_565 = 13
allegro.ALLEGRO_PIXEL_FORMAT_RGB_888 = 12
allegro.ALLEGRO_PIXEL_FORMAT_SINGLE_CHANNEL_8 = 27
allegro.ALLEGRO_PIXEL_FORMAT_XBGR_8888 = 18
allegro.ALLEGRO_PIXEL_FORMAT_XRGB_8888 = 23
allegro.ALLEGRO_PIXEL_SHADER = 2
allegro.ALLEGRO_PLAYMODE_BIDIR = 258
allegro.ALLEGRO_PLAYMODE_LOOP = 257
allegro.ALLEGRO_PLAYMODE_LOOP_ONCE = 261
allegro.ALLEGRO_PLAYMODE_ONCE = 256
allegro.ALLEGRO_PRIM_ATTR_NUM = 15
allegro.ALLEGRO_PRIM_BUFFER_DYNAMIC = 4
allegro.ALLEGRO_PRIM_BUFFER_READWRITE = 8
allegro.ALLEGRO_PRIM_BUFFER_STATIC = 2
allegro.ALLEGRO_PRIM_BUFFER_STREAM = 1
allegro.ALLEGRO_PRIM_COLOR_ATTR = 2
allegro.ALLEGRO_PRIM_FLOAT_1 = 3
allegro.ALLEGRO_PRIM_FLOAT_2 = 0
allegro.ALLEGRO_PRIM_FLOAT_3 = 1
allegro.ALLEGRO_PRIM_FLOAT_4 = 4
allegro.ALLEGRO_PRIM_HALF_FLOAT_2 = 12
allegro.ALLEGRO_PRIM_HALF_FLOAT_4 = 13
allegro.ALLEGRO_PRIM_LINE_LIST = 0
allegro.ALLEGRO_PRIM_LINE_LOOP = 2
allegro.ALLEGRO_PRIM_LINE_STRIP = 1
allegro.ALLEGRO_PRIM_MAX_USER_ATTR = 10
allegro.ALLEGRO_PRIM_NORMALIZED_SHORT_2 = 8
allegro.ALLEGRO_PRIM_NORMALIZED_SHORT_4 = 9
allegro.ALLEGRO_PRIM_NORMALIZED_UBYTE_4 = 7
allegro.ALLEGRO_PRIM_NORMALIZED_USHORT_2 = 10
allegro.ALLEGRO_PRIM_NORMALIZED_USHORT_4 = 11
allegro.ALLEGRO_PRIM_NUM_TYPES = 7
allegro.ALLEGRO_PRIM_POINT_LIST = 6
allegro.ALLEGRO_PRIM_POSITION = 1
allegro.ALLEGRO_PRIM_QUALITY = 10
allegro.ALLEGRO_PRIM_SHORT_2 = 2
allegro.ALLEGRO_PRIM_SHORT_4 = 6
allegro.ALLEGRO_PRIM_TEX_COORD = 3
allegro.ALLEGRO_PRIM_TEX_COORD_PIXEL = 4
allegro.ALLEGRO_PRIM_TRIANGLE_FAN = 5
allegro.ALLEGRO_PRIM_TRIANGLE_LIST = 3
allegro.ALLEGRO_PRIM_TRIANGLE_STRIP = 4
allegro.ALLEGRO_PRIM_UBYTE_4 = 5
allegro.ALLEGRO_PRIM_USER_ATTR = 5
allegro.ALLEGRO_PROGRAMMABLE_PIPELINE = 2048
allegro.ALLEGRO_RED_SHIFT = 4
allegro.ALLEGRO_RED_SIZE = 0
allegro.ALLEGRO_RELEASE_NUMBER = 0
allegro.ALLEGRO_RENDER_ALWAYS = 1
allegro.ALLEGRO_RENDER_EQUAL = 3
allegro.ALLEGRO_RENDER_GREATER = 5
allegro.ALLEGRO_RENDER_GREATER_EQUAL = 7
allegro.ALLEGRO_RENDER_LESS = 2
allegro.ALLEGRO_RENDER_LESS_EQUAL = 4
allegro.ALLEGRO_RENDER_METHOD = 19
allegro.ALLEGRO_RENDER_NEVER = 0
allegro.ALLEGRO_RENDER_NOT_EQUAL = 6
allegro.ALLEGRO_REQUIRE = 1
allegro.ALLEGRO_RESIZABLE = 16
allegro.ALLEGRO_RESOURCES_PATH = 0
allegro.ALLEGRO_SAMPLES = 18
allegro.ALLEGRO_SAMPLE_BUFFERS = 17
allegro.ALLEGRO_SEEK_CUR = 1
allegro.ALLEGRO_SEEK_END = 2
allegro.ALLEGRO_SEEK_SET = 0
allegro.ALLEGRO_SHADER_AUTO = 0
allegro.ALLEGRO_SHADER_AUTO_MINIMAL = 3
allegro.ALLEGRO_SHADER_GLSL = 1
allegro.ALLEGRO_SHADER_GLSL_MINIMAL = 4
allegro.ALLEGRO_SHADER_HLSL = 2
allegro.ALLEGRO_SHADER_HLSL_MINIMAL = 5
allegro.ALLEGRO_SHADER_HLSL_SM_3_0 = 6
allegro.ALLEGRO_SINGLE_BUFFER = 22
allegro.ALLEGRO_SRC_COLOR = 4
allegro.ALLEGRO_SRC_MINUS_DEST = 1
allegro.ALLEGRO_STATE_ALL = 65535
allegro.ALLEGRO_STATE_BITMAP = 10
allegro.ALLEGRO_STATE_BLENDER = 16
allegro.ALLEGRO_STATE_DISPLAY = 4
allegro.ALLEGRO_STATE_NEW_BITMAP_PARAMETERS = 2
allegro.ALLEGRO_STATE_NEW_DISPLAY_PARAMETERS = 1
allegro.ALLEGRO_STATE_NEW_FILE_INTERFACE = 32
allegro.ALLEGRO_STATE_PROJECTION_TRANSFORM = 256
allegro.ALLEGRO_STATE_TARGET_BITMAP = 8
allegro.ALLEGRO_STATE_TRANSFORM = 64
allegro.ALLEGRO_STENCIL_SIZE = 16
allegro.ALLEGRO_STEREO = 12
allegro.ALLEGRO_SUB_VERSION = 2
allegro.ALLEGRO_SUGGEST = 2
allegro.ALLEGRO_SUPPORTED_ORIENTATIONS = 32
allegro.ALLEGRO_SUPPORT_NPOT_BITMAP = 28
allegro.ALLEGRO_SUPPORT_SEPARATE_ALPHA = 30
allegro.ALLEGRO_SWAP_METHOD = 23
allegro.ALLEGRO_SYSTEM_ID_ANDROID = 1095648338
allegro.ALLEGRO_SYSTEM_ID_GP2XWIZ = 1464424992
allegro.ALLEGRO_SYSTEM_ID_IPHONE = 1229998159
allegro.ALLEGRO_SYSTEM_ID_MACOSX = 1330862112
allegro.ALLEGRO_SYSTEM_ID_RASPBERRYPI = 1380012880
allegro.ALLEGRO_SYSTEM_ID_SDL = 1396984882
allegro.ALLEGRO_SYSTEM_ID_UNKNOWN = 0
allegro.ALLEGRO_SYSTEM_ID_WINDOWS = 1464421956
allegro.ALLEGRO_SYSTEM_ID_XGLX = 1481067608
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_ALT_SELECT = 18
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_ARROW = 2
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_BUSY = 3
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_DEFAULT = 1
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_EDIT = 5
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_LINK = 17
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_MOVE = 6
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_NONE = 0
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_PRECISION = 16
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_PROGRESS = 15
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_QUESTION = 4
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_E = 10
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_N = 7
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NE = 14
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_NW = 11
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_S = 9
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SE = 13
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_SW = 12
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_RESIZE_W = 8
allegro.ALLEGRO_SYSTEM_MOUSE_CURSOR_UNAVAILABLE = 19
allegro.ALLEGRO_TEMP_PATH = 1
allegro.ALLEGRO_TEXTLOG_MONOSPACE = 2
allegro.ALLEGRO_TEXTLOG_NO_CLOSE = 1
allegro.ALLEGRO_TOUCH_INPUT_MAX_TOUCH_COUNT = 16
allegro.ALLEGRO_TTF_MONOCHROME = 2
allegro.ALLEGRO_TTF_NO_AUTOHINT = 4
allegro.ALLEGRO_TTF_NO_KERNING = 1
allegro.ALLEGRO_UNSTABLE_BIT = 0
allegro.ALLEGRO_UPDATE_DISPLAY_REGION = 25
allegro.ALLEGRO_USER_DATA_PATH = 2
allegro.ALLEGRO_USER_DOCUMENTS_PATH = 5
allegro.ALLEGRO_USER_HOME_PATH = 3
allegro.ALLEGRO_USER_SETTINGS_PATH = 4
allegro.ALLEGRO_VERSION = 5
allegro.ALLEGRO_VERTEX_CACHE_SIZE = 256
allegro.ALLEGRO_VERTEX_SHADER = 1
allegro.ALLEGRO_VIDEO_BITMAP = 1024
allegro.ALLEGRO_VIDEO_POSITION_ACTUAL = 0
allegro.ALLEGRO_VIDEO_POSITION_AUDIO_DECODE = 2
allegro.ALLEGRO_VIDEO_POSITION_VIDEO_DECODE = 1
allegro.ALLEGRO_VSYNC = 26
allegro.ALLEGRO_WINDOWED = 1
allegro.ALLEGRO_WIP_VERSION = 10
allegro.ALLEGRO_WRITE_MASK = 17
allegro.ALLEGRO_ZERO = 0
allegro._ALLEGRO_ALPHA_TEST = 16
allegro._ALLEGRO_EVENT_VIDEO_SEEK = 552
allegro._ALLEGRO_INTERNAL_OPENGL = 32
allegro._ALLEGRO_KEEP_BITMAP_FORMAT = 2
allegro._ALLEGRO_NO_PREMULTIPLIED_ALPHA = 512
allegro._ALLEGRO_PLAYMODE_STREAM_LOOP_ONCE = 262
allegro._ALLEGRO_PLAYMODE_STREAM_ONCE = 259
allegro._ALLEGRO_PLAYMODE_STREAM_ONEDIR = 260
allegro._ALLEGRO_PRIM_MAX_USER_ATTR = 10
allegro._KCM_STREAM_FEEDER_QUIT_EVENT_TYPE = 512

allegro.cdef = [[

typedef uint64_t off_t;
typedef int64_t time_t;
typedef void* va_list;
typedef int al_fixed;
typedef unsigned int GLuint;
typedef unsigned int ALLEGRO_EVENT_TYPE;
enum { ALLEGRO_KEY_MAX = 227 };

// ENUMS
typedef enum ALLEGRO_BLEND_MODE ALLEGRO_BLEND_MODE;
typedef enum ALLEGRO_BLEND_OPERATIONS ALLEGRO_BLEND_OPERATIONS;
typedef enum ALLEGRO_DISPLAY_OPTIONS ALLEGRO_DISPLAY_OPTIONS;
typedef enum ALLEGRO_DISPLAY_ORIENTATION ALLEGRO_DISPLAY_ORIENTATION;
typedef enum ALLEGRO_JOYFLAGS ALLEGRO_JOYFLAGS;
typedef enum ALLEGRO_SHADER_TYPE ALLEGRO_SHADER_TYPE;
typedef enum ALLEGRO_SHADER_PLATFORM ALLEGRO_SHADER_PLATFORM;
typedef enum ALLEGRO_SYSTEM_ID ALLEGRO_SYSTEM_ID;
typedef enum ALLEGRO_AUDIO_EVENT_TYPE ALLEGRO_AUDIO_EVENT_TYPE;
typedef enum ALLEGRO_AUDIO_DEPTH ALLEGRO_AUDIO_DEPTH;
typedef enum ALLEGRO_CHANNEL_CONF ALLEGRO_CHANNEL_CONF;
typedef enum ALLEGRO_PLAYMODE ALLEGRO_PLAYMODE;
typedef enum ALLEGRO_MIXER_QUALITY ALLEGRO_MIXER_QUALITY;
typedef enum ALLEGRO_VIDEO_EVENT_TYPE ALLEGRO_VIDEO_EVENT_TYPE;
typedef enum ALLEGRO_VIDEO_POSITION_TYPE ALLEGRO_VIDEO_POSITION_TYPE;
typedef enum ALLEGRO_PIXEL_FORMAT ALLEGRO_PIXEL_FORMAT;
typedef enum ALLEGRO_SEEK ALLEGRO_SEEK;
typedef enum ALLEGRO_FILE_MODE ALLEGRO_FILE_MODE;
typedef enum ALLEGRO_FOR_EACH_FS_ENTRY_RESULT ALLEGRO_FOR_EACH_FS_ENTRY_RESULT;
typedef enum ALLEGRO_SYSTEM_MOUSE_CURSOR ALLEGRO_SYSTEM_MOUSE_CURSOR;
typedef enum ALLEGRO_RENDER_STATE ALLEGRO_RENDER_STATE;
typedef enum ALLEGRO_RENDER_FUNCTION ALLEGRO_RENDER_FUNCTION;
typedef enum ALLEGRO_WRITE_MASK_FLAGS ALLEGRO_WRITE_MASK_FLAGS;
typedef enum ALLEGRO_SHADER_TYPE ALLEGRO_SHADER_TYPE;
typedef enum ALLEGRO_SHADER_PLATFORM ALLEGRO_SHADER_PLATFORM;
typedef enum ALLEGRO_SYSTEM_ID ALLEGRO_SYSTEM_ID;
typedef enum ALLEGRO_STATE_FLAGS ALLEGRO_STATE_FLAGS;
typedef enum ALLEGRO_AUDIO_DEPTH ALLEGRO_AUDIO_DEPTH;
typedef enum ALLEGRO_CHANNEL_CONF ALLEGRO_CHANNEL_CONF;
typedef enum ALLEGRO_PLAYMODE ALLEGRO_PLAYMODE;
typedef enum ALLEGRO_MIXER_QUALITY ALLEGRO_MIXER_QUALITY;
typedef enum ALLEGRO_OPENGL_VARIANT ALLEGRO_OPENGL_VARIANT;
typedef enum ALLEGRO_PRIM_TYPE ALLEGRO_PRIM_TYPE;
typedef enum ALLEGRO_PRIM_ATTR ALLEGRO_PRIM_ATTR;
typedef enum ALLEGRO_PRIM_STORAGE ALLEGRO_PRIM_STORAGE;
typedef enum ALLEGRO_LINE_JOIN ALLEGRO_LINE_JOIN;
typedef enum ALLEGRO_LINE_CAP ALLEGRO_LINE_CAP;
typedef enum ALLEGRO_PRIM_BUFFER_FLAGS ALLEGRO_PRIM_BUFFER_FLAGS;
typedef enum ALLEGRO_VIDEO_POSITION_TYPE ALLEGRO_VIDEO_POSITION_TYPE;

// TYPES
struct ALLEGRO_BITMAP;

struct ALLEGRO_DISPLAY;

typedef struct ALLEGRO_TIMEOUT ALLEGRO_TIMEOUT;

typedef struct ALLEGRO_COLOR ALLEGRO_COLOR;

typedef struct ALLEGRO_BITMAP ALLEGRO_BITMAP;

typedef struct _al_tagbstring ALLEGRO_USTR;

typedef struct _al_tagbstring ALLEGRO_USTR_INFO;

typedef struct ALLEGRO_PATH ALLEGRO_PATH;

typedef struct ALLEGRO_FILE ALLEGRO_FILE;

typedef struct ALLEGRO_LOCKED_REGION ALLEGRO_LOCKED_REGION;

typedef unsigned int ALLEGRO_EVENT_TYPE;

typedef struct ALLEGRO_EVENT_SOURCE ALLEGRO_EVENT_SOURCE;

typedef struct ALLEGRO_USER_EVENT ALLEGRO_USER_EVENT;

typedef union ALLEGRO_EVENT ALLEGRO_EVENT;

typedef struct ALLEGRO_EVENT_QUEUE ALLEGRO_EVENT_QUEUE;

typedef struct ALLEGRO_DISPLAY ALLEGRO_DISPLAY;

typedef struct ALLEGRO_CONFIG ALLEGRO_CONFIG;

typedef struct ALLEGRO_CONFIG_SECTION ALLEGRO_CONFIG_SECTION;

typedef struct ALLEGRO_CONFIG_ENTRY ALLEGRO_CONFIG_ENTRY;

typedef struct ALLEGRO_FS_ENTRY ALLEGRO_FS_ENTRY;

typedef struct ALLEGRO_FS_INTERFACE ALLEGRO_FS_INTERFACE;

typedef struct ALLEGRO_JOYSTICK ALLEGRO_JOYSTICK;

typedef struct ALLEGRO_JOYSTICK_STATE ALLEGRO_JOYSTICK_STATE;

typedef struct ALLEGRO_KEYBOARD ALLEGRO_KEYBOARD;

typedef struct ALLEGRO_KEYBOARD_STATE ALLEGRO_KEYBOARD_STATE;

typedef struct ALLEGRO_MOUSE ALLEGRO_MOUSE;

typedef struct ALLEGRO_MOUSE_STATE ALLEGRO_MOUSE_STATE;

typedef struct ALLEGRO_TOUCH_INPUT ALLEGRO_TOUCH_INPUT;

typedef struct ALLEGRO_TOUCH_INPUT_STATE ALLEGRO_TOUCH_INPUT_STATE;

typedef struct ALLEGRO_TOUCH_STATE ALLEGRO_TOUCH_STATE;

typedef struct ALLEGRO_MEMORY_INTERFACE ALLEGRO_MEMORY_INTERFACE;

typedef struct ALLEGRO_MOUSE_CURSOR ALLEGRO_MOUSE_CURSOR;

typedef struct ALLEGRO_TRANSFORM ALLEGRO_TRANSFORM;

typedef struct ALLEGRO_SHADER ALLEGRO_SHADER;

typedef struct ALLEGRO_SYSTEM ALLEGRO_SYSTEM;

typedef struct ALLEGRO_THREAD ALLEGRO_THREAD;

typedef struct ALLEGRO_MUTEX ALLEGRO_MUTEX;

typedef struct ALLEGRO_COND ALLEGRO_COND;

typedef struct ALLEGRO_TIMER ALLEGRO_TIMER;

typedef struct ALLEGRO_STATE ALLEGRO_STATE;

typedef struct ALLEGRO_SAMPLE ALLEGRO_SAMPLE;

typedef struct ALLEGRO_SAMPLE_ID ALLEGRO_SAMPLE_ID;

typedef struct ALLEGRO_SAMPLE_INSTANCE ALLEGRO_SAMPLE_INSTANCE;

typedef struct ALLEGRO_AUDIO_STREAM ALLEGRO_AUDIO_STREAM;

typedef struct ALLEGRO_MIXER ALLEGRO_MIXER;

typedef struct ALLEGRO_VOICE ALLEGRO_VOICE;

typedef struct ALLEGRO_AUDIO_DEVICE ALLEGRO_AUDIO_DEVICE;

typedef struct ALLEGRO_OGL_EXT_LIST ALLEGRO_OGL_EXT_LIST;

typedef struct ALLEGRO_FONT ALLEGRO_FONT;

typedef struct ALLEGRO_FILECHOOSER ALLEGRO_FILECHOOSER;

typedef struct ALLEGRO_TEXTLOG ALLEGRO_TEXTLOG;

typedef struct ALLEGRO_MENU ALLEGRO_MENU;

typedef struct ALLEGRO_VERTEX_ELEMENT ALLEGRO_VERTEX_ELEMENT;

typedef struct ALLEGRO_VERTEX_DECL ALLEGRO_VERTEX_DECL;

typedef struct ALLEGRO_VERTEX ALLEGRO_VERTEX;

typedef struct ALLEGRO_VERTEX_BUFFER ALLEGRO_VERTEX_BUFFER;

typedef struct ALLEGRO_INDEX_BUFFER ALLEGRO_INDEX_BUFFER;

typedef struct ALLEGRO_VIDEO ALLEGRO_VIDEO;

typedef ALLEGRO_BITMAP *(*ALLEGRO_IIO_LOADER_FUNCTION)(const char *filename, int flags);

typedef ALLEGRO_BITMAP *(*ALLEGRO_IIO_FS_LOADER_FUNCTION)(ALLEGRO_FILE *fp, int flags);

typedef _Bool (*ALLEGRO_IIO_SAVER_FUNCTION)(const char *filename, ALLEGRO_BITMAP *bitmap);

typedef _Bool (*ALLEGRO_IIO_FS_SAVER_FUNCTION)(ALLEGRO_FILE *fp, ALLEGRO_BITMAP *bitmap);

typedef _Bool (*ALLEGRO_IIO_IDENTIFIER_FUNCTION)(ALLEGRO_FILE *f);

struct ALLEGRO_TIMEOUT {uint64_t __pad1__;uint64_t __pad2__;};

struct ALLEGRO_COLOR {float r, g, b, a;};

struct ALLEGRO_LOCKED_REGION {void *data;int format;int pitch;int pixel_size;};

struct ALLEGRO_EVENT_SOURCE {int __pad[32];};

struct ALLEGRO_USER_EVENT {ALLEGRO_EVENT_TYPE type; struct ALLEGRO_EVENT_SOURCE *source; double timestamp;struct ALLEGRO_USER_EVENT_DESCRIPTOR *__internal__descr;intptr_t data1;intptr_t data2;intptr_t data3;intptr_t data4;};

struct ALLEGRO_FS_INTERFACE {ALLEGRO_FS_ENTRY * (*fs_create_entry) (const char *path);void (*fs_destroy_entry) (ALLEGRO_FS_ENTRY *e);const char * (*fs_entry_name) (ALLEGRO_FS_ENTRY *e);_Bool (*fs_update_entry) (ALLEGRO_FS_ENTRY *e);uint32_t (*fs_entry_mode) (ALLEGRO_FS_ENTRY *e);time_t (*fs_entry_atime) (ALLEGRO_FS_ENTRY *e);time_t (*fs_entry_mtime) (ALLEGRO_FS_ENTRY *e);time_t (*fs_entry_ctime) (ALLEGRO_FS_ENTRY *e);off_t (*fs_entry_size) (ALLEGRO_FS_ENTRY *e);_Bool (*fs_entry_exists) (ALLEGRO_FS_ENTRY *e);_Bool (*fs_remove_entry) (ALLEGRO_FS_ENTRY *e);_Bool (*fs_open_directory) (ALLEGRO_FS_ENTRY *e);ALLEGRO_FS_ENTRY * (*fs_read_directory) (ALLEGRO_FS_ENTRY *e);_Bool (*fs_close_directory) (ALLEGRO_FS_ENTRY *e);_Bool (*fs_filename_exists) (const char *path);_Bool (*fs_remove_filename) (const char *path);char * (*fs_get_current_directory) (void);_Bool (*fs_change_directory) (const char *path);_Bool (*fs_make_directory) (const char *path);ALLEGRO_FILE * (*fs_open_file) (ALLEGRO_FS_ENTRY *e, const char *mode);};

struct ALLEGRO_JOYSTICK_STATE {struct {float axis[3];} stick[16];int button[32];};

struct ALLEGRO_KEYBOARD_STATE {struct ALLEGRO_DISPLAY *display;unsigned int __key_down__internal__[(ALLEGRO_KEY_MAX + 31) / 32];};

struct ALLEGRO_MOUSE_STATE {int x;int y;int z;int w;int more_axes[4];int buttons;float pressure;struct ALLEGRO_DISPLAY *display;};

struct ALLEGRO_TOUCH_STATE {int id;float x, y;float dx, dy;_Bool primary;struct ALLEGRO_DISPLAY *display;};

struct ALLEGRO_TOUCH_INPUT_STATE {ALLEGRO_TOUCH_STATE touches[16];};

struct ALLEGRO_MEMORY_INTERFACE {void *(*mi_malloc)(size_t n, int line, const char *file, const char *func);void (*mi_free)(void *ptr, int line, const char *file, const char *func);void *(*mi_realloc)(void *ptr, size_t n, int line, const char *file, const char *func);void *(*mi_calloc)(size_t count, size_t n, int line, const char *file, const char *func);};

struct ALLEGRO_TRANSFORM {float m[4][4];};

struct ALLEGRO_STATE {char _tls[1024];};

struct ALLEGRO_SAMPLE_ID {int _index;int _id;};

struct ALLEGRO_VERTEX_ELEMENT {int attribute;int storage;int offset;};

struct ALLEGRO_VERTEX {float x, y, z;float u, v;ALLEGRO_COLOR color;};

typedef struct ALLEGRO_FILE_INTERFACE {void * (*fi_fopen) (const char *path, const char *mode);_Bool (*fi_fclose) (ALLEGRO_FILE *handle);size_t (*fi_fread) (ALLEGRO_FILE *f, void *ptr, size_t size);size_t (*fi_fwrite) (ALLEGRO_FILE *f, const void *ptr, size_t size);_Bool (*fi_fflush) (ALLEGRO_FILE *f);int64_t (*fi_ftell) (ALLEGRO_FILE *f);_Bool (*fi_fseek) (ALLEGRO_FILE *f, int64_t offset, int whence);_Bool (*fi_feof) (ALLEGRO_FILE *f);int (*fi_ferror) (ALLEGRO_FILE *f);const char * (*fi_ferrmsg) (ALLEGRO_FILE *f);void (*fi_fclearerr) (ALLEGRO_FILE *f);int (*fi_fungetc) (ALLEGRO_FILE *f, int c);off_t (*fi_fsize) (ALLEGRO_FILE *f);} ALLEGRO_FILE_INTERFACE;

typedef struct ALLEGRO_ANY_EVENT {ALLEGRO_EVENT_TYPE type; ALLEGRO_EVENT_SOURCE *source; double timestamp;} ALLEGRO_ANY_EVENT;

typedef struct ALLEGRO_DISPLAY_EVENT {ALLEGRO_EVENT_TYPE type; struct ALLEGRO_DISPLAY *source; double timestamp;int x, y;int width, height;int orientation;} ALLEGRO_DISPLAY_EVENT;

typedef struct ALLEGRO_JOYSTICK_EVENT {ALLEGRO_EVENT_TYPE type; struct ALLEGRO_JOYSTICK *source; double timestamp;struct ALLEGRO_JOYSTICK *id;int stick;int axis;float pos;int button;} ALLEGRO_JOYSTICK_EVENT;

typedef struct ALLEGRO_KEYBOARD_EVENT {ALLEGRO_EVENT_TYPE type; struct ALLEGRO_KEYBOARD *source; double timestamp;struct ALLEGRO_DISPLAY *display;int keycode;int unichar;unsigned int modifiers;_Bool repeat;} ALLEGRO_KEYBOARD_EVENT;

typedef struct ALLEGRO_MOUSE_EVENT {ALLEGRO_EVENT_TYPE type; struct ALLEGRO_MOUSE *source; double timestamp;struct ALLEGRO_DISPLAY *display;int x, y, z, w;int dx, dy, dz, dw;unsigned int button;float pressure;} ALLEGRO_MOUSE_EVENT;

typedef struct ALLEGRO_TIMER_EVENT {ALLEGRO_EVENT_TYPE type; struct ALLEGRO_TIMER *source; double timestamp;int64_t count;double error;} ALLEGRO_TIMER_EVENT;

typedef struct ALLEGRO_TOUCH_EVENT {ALLEGRO_EVENT_TYPE type; struct ALLEGRO_TOUCH_INPUT *source; double timestamp;struct ALLEGRO_DISPLAY *display;int id;float x, y;float dx, dy;_Bool primary;} ALLEGRO_TOUCH_EVENT;

typedef struct ALLEGRO_DROP_EVENT {ALLEGRO_EVENT_TYPE type; struct ALLEGRO_DISPLAY *source; double timestamp;int x, y;int row;_Bool is_file;char *text;_Bool is_complete;} ALLEGRO_DROP_EVENT;

typedef struct ALLEGRO_DISPLAY_MODE {int width;int height;int format;int refresh_rate;} ALLEGRO_DISPLAY_MODE;

typedef struct ALLEGRO_MONITOR_INFO {int x1;int y1;int x2;int y2;} ALLEGRO_MONITOR_INFO;

typedef struct ALLEGRO_MENU_INFO {const char *caption;uint16_t id;int flags;ALLEGRO_BITMAP *icon;} ALLEGRO_MENU_INFO;

union ALLEGRO_EVENT {ALLEGRO_EVENT_TYPE type;ALLEGRO_ANY_EVENT any;ALLEGRO_DISPLAY_EVENT display;ALLEGRO_JOYSTICK_EVENT joystick;ALLEGRO_KEYBOARD_EVENT keyboard;ALLEGRO_MOUSE_EVENT mouse;ALLEGRO_TIMER_EVENT timer;ALLEGRO_TOUCH_EVENT touch;ALLEGRO_USER_EVENT user;ALLEGRO_DROP_EVENT drop;};

struct ALLEGRO_FS_ENTRY {struct ALLEGRO_FS_INTERFACE const *vtable;};


// FUNCTIONS
uint32_t al_get_allegro_version (void);

int al_run_main (int argc, char **argv, int (*)(int, char **));

double al_get_time (void);

void al_rest (double seconds);

void al_init_timeout (ALLEGRO_TIMEOUT *timeout, double seconds);

ALLEGRO_COLOR al_map_rgb (unsigned char r, unsigned char g, unsigned char b);

ALLEGRO_COLOR al_map_rgba (unsigned char r, unsigned char g, unsigned char b, unsigned char a);

ALLEGRO_COLOR al_map_rgb_f (float r, float g, float b);

ALLEGRO_COLOR al_map_rgba_f (float r, float g, float b, float a);

ALLEGRO_COLOR al_premul_rgba (unsigned char r, unsigned char g, unsigned char b, unsigned char a);

ALLEGRO_COLOR al_premul_rgba_f (float r, float g, float b, float a);

void al_unmap_rgb (ALLEGRO_COLOR color, unsigned char *r, unsigned char *g, unsigned char *b);

void al_unmap_rgba (ALLEGRO_COLOR color, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);

void al_unmap_rgb_f (ALLEGRO_COLOR color, float *r, float *g, float *b);

void al_unmap_rgba_f (ALLEGRO_COLOR color, float *r, float *g, float *b, float *a);

int al_get_pixel_size (int format);

int al_get_pixel_format_bits (int format);

int al_get_pixel_block_size (int format);

int al_get_pixel_block_width (int format);

int al_get_pixel_block_height (int format);

void al_set_new_bitmap_format (int format);

void al_set_new_bitmap_flags (int flags);

int al_get_new_bitmap_format (void);

int al_get_new_bitmap_flags (void);

void al_add_new_bitmap_flag (int flag);

int al_get_bitmap_width (ALLEGRO_BITMAP *bitmap);

int al_get_bitmap_height (ALLEGRO_BITMAP *bitmap);

int al_get_bitmap_format (ALLEGRO_BITMAP *bitmap);

int al_get_bitmap_flags (ALLEGRO_BITMAP *bitmap);

ALLEGRO_BITMAP* al_create_bitmap (int w, int h);

void al_destroy_bitmap (ALLEGRO_BITMAP *bitmap);

void al_put_pixel (int x, int y, ALLEGRO_COLOR color);

void al_put_blended_pixel (int x, int y, ALLEGRO_COLOR color);

ALLEGRO_COLOR al_get_pixel (ALLEGRO_BITMAP *bitmap, int x, int y);

void al_convert_mask_to_alpha (ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR mask_color);

void al_set_clipping_rectangle (int x, int y, int width, int height);

void al_reset_clipping_rectangle (void);

void al_get_clipping_rectangle (int *x, int *y, int *w, int *h);

ALLEGRO_BITMAP * al_create_sub_bitmap (ALLEGRO_BITMAP *parent, int x, int y, int w, int h);

_Bool al_is_sub_bitmap (ALLEGRO_BITMAP *bitmap);

ALLEGRO_BITMAP * al_get_parent_bitmap (ALLEGRO_BITMAP *bitmap);

int al_get_bitmap_x (ALLEGRO_BITMAP *bitmap);

int al_get_bitmap_y (ALLEGRO_BITMAP *bitmap);

void al_reparent_bitmap (ALLEGRO_BITMAP *bitmap, ALLEGRO_BITMAP *parent, int x, int y, int w, int h);

ALLEGRO_BITMAP * al_clone_bitmap (ALLEGRO_BITMAP *bitmap);

void al_convert_bitmap (ALLEGRO_BITMAP *bitmap);

void al_convert_memory_bitmaps (void);

void al_draw_bitmap (ALLEGRO_BITMAP *bitmap, float dx, float dy, int flags);

void al_draw_bitmap_region (ALLEGRO_BITMAP *bitmap, float sx, float sy, float sw, float sh, float dx, float dy, int flags);

void al_draw_scaled_bitmap (ALLEGRO_BITMAP *bitmap, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags);

void al_draw_rotated_bitmap (ALLEGRO_BITMAP *bitmap, float cx, float cy, float dx, float dy, float angle, int flags);

void al_draw_scaled_rotated_bitmap (ALLEGRO_BITMAP *bitmap, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);

void al_draw_tinted_bitmap (ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float dx, float dy, int flags);

void al_draw_tinted_bitmap_region (ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, int flags);

void al_draw_tinted_scaled_bitmap (ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh, int flags);

void al_draw_tinted_rotated_bitmap (ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float angle, int flags);

void al_draw_tinted_scaled_rotated_bitmap (ALLEGRO_BITMAP *bitmap, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);

void al_draw_tinted_scaled_rotated_bitmap_region ( ALLEGRO_BITMAP *bitmap, float sx, float sy, float sw, float sh, ALLEGRO_COLOR tint, float cx, float cy, float dx, float dy, float xscale, float yscale, float angle, int flags);

ALLEGRO_USTR * al_ustr_new (const char *s);

ALLEGRO_USTR * al_ustr_new_from_buffer (const char *s, size_t size);

ALLEGRO_USTR * al_ustr_newf (const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));

void al_ustr_free (ALLEGRO_USTR *us);

const char * al_cstr (const ALLEGRO_USTR *us);

void al_ustr_to_buffer (const ALLEGRO_USTR *us, char *buffer, int size);

char * al_cstr_dup (const ALLEGRO_USTR *us);

ALLEGRO_USTR * al_ustr_dup (const ALLEGRO_USTR *us);

ALLEGRO_USTR * al_ustr_dup_substr (const ALLEGRO_USTR *us, int start_pos, int end_pos);

const ALLEGRO_USTR * al_ustr_empty_string (void);

const ALLEGRO_USTR * al_ref_cstr (ALLEGRO_USTR_INFO *info, const char *s);

const ALLEGRO_USTR * al_ref_buffer (ALLEGRO_USTR_INFO *info, const char *s, size_t size);

const ALLEGRO_USTR * al_ref_ustr (ALLEGRO_USTR_INFO *info, const ALLEGRO_USTR *us, int start_pos, int end_pos);

size_t al_ustr_size (const ALLEGRO_USTR *us);

size_t al_ustr_length (const ALLEGRO_USTR *us);

int al_ustr_offset (const ALLEGRO_USTR *us, int index);

_Bool al_ustr_next (const ALLEGRO_USTR *us, int *pos);

_Bool al_ustr_prev (const ALLEGRO_USTR *us, int *pos);

int32_t al_ustr_get (const ALLEGRO_USTR *us, int pos);

int32_t al_ustr_get_next (const ALLEGRO_USTR *us, int *pos);

int32_t al_ustr_prev_get (const ALLEGRO_USTR *us, int *pos);

_Bool al_ustr_insert (ALLEGRO_USTR *us1, int pos, const ALLEGRO_USTR *us2);

_Bool al_ustr_insert_cstr (ALLEGRO_USTR *us, int pos, const char *us2);

size_t al_ustr_insert_chr (ALLEGRO_USTR *us, int pos, int32_t c);

_Bool al_ustr_append (ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2);

_Bool al_ustr_append_cstr (ALLEGRO_USTR *us, const char *s);

size_t al_ustr_append_chr (ALLEGRO_USTR *us, int32_t c);

_Bool al_ustr_appendf (ALLEGRO_USTR *us, const char *fmt, ...) __attribute__ ((format (printf, 2, 3)));

_Bool al_ustr_vappendf (ALLEGRO_USTR *us, const char *fmt, va_list ap);

_Bool al_ustr_remove_chr (ALLEGRO_USTR *us, int pos);

_Bool al_ustr_remove_range (ALLEGRO_USTR *us, int start_pos, int end_pos);

_Bool al_ustr_truncate (ALLEGRO_USTR *us, int start_pos);

_Bool al_ustr_ltrim_ws (ALLEGRO_USTR *us);

_Bool al_ustr_rtrim_ws (ALLEGRO_USTR *us);

_Bool al_ustr_trim_ws (ALLEGRO_USTR *us);

_Bool al_ustr_assign (ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2);

_Bool al_ustr_assign_substr (ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2, int start_pos, int end_pos);

_Bool al_ustr_assign_cstr (ALLEGRO_USTR *us1, const char *s);

size_t al_ustr_set_chr (ALLEGRO_USTR *us, int pos, int32_t c);

_Bool al_ustr_replace_range (ALLEGRO_USTR *us1, int start_pos1, int end_pos1, const ALLEGRO_USTR *us2);

int al_ustr_find_chr (const ALLEGRO_USTR *us, int start_pos, int32_t c);

int al_ustr_rfind_chr (const ALLEGRO_USTR *us, int start_pos, int32_t c);

int al_ustr_find_set (const ALLEGRO_USTR *us, int start_pos, const ALLEGRO_USTR *accept);

int al_ustr_find_set_cstr (const ALLEGRO_USTR *us, int start_pos, const char *accept);

int al_ustr_find_cset (const ALLEGRO_USTR *us, int start_pos, const ALLEGRO_USTR *reject);

int al_ustr_find_cset_cstr (const ALLEGRO_USTR *us, int start_pos, const char *reject);

int al_ustr_find_str (const ALLEGRO_USTR *haystack, int start_pos, const ALLEGRO_USTR *needle);

int al_ustr_find_cstr (const ALLEGRO_USTR *haystack, int start_pos, const char *needle);

int al_ustr_rfind_str (const ALLEGRO_USTR *haystack, int start_pos, const ALLEGRO_USTR *needle);

int al_ustr_rfind_cstr (const ALLEGRO_USTR *haystack, int start_pos, const char *needle);

_Bool al_ustr_find_replace (ALLEGRO_USTR *us, int start_pos, const ALLEGRO_USTR *find, const ALLEGRO_USTR *replace);

_Bool al_ustr_find_replace_cstr (ALLEGRO_USTR *us, int start_pos, const char *find, const char *replace);

_Bool al_ustr_equal (const ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2);

int al_ustr_compare (const ALLEGRO_USTR *u, const ALLEGRO_USTR *v);

int al_ustr_ncompare (const ALLEGRO_USTR *us1, const ALLEGRO_USTR *us2, int n);

_Bool al_ustr_has_prefix (const ALLEGRO_USTR *u, const ALLEGRO_USTR *v);

_Bool al_ustr_has_prefix_cstr (const ALLEGRO_USTR *u, const char *s);

_Bool al_ustr_has_suffix (const ALLEGRO_USTR *u, const ALLEGRO_USTR *v);

_Bool al_ustr_has_suffix_cstr (const ALLEGRO_USTR *us1, const char *s);

size_t al_utf8_width (int32_t c);

size_t al_utf8_encode (char s[], int32_t c);

ALLEGRO_USTR * al_ustr_new_from_utf16 (uint16_t const *s);

size_t al_ustr_size_utf16 (const ALLEGRO_USTR *us);

size_t al_ustr_encode_utf16 (const ALLEGRO_USTR *us, uint16_t *s, size_t n);

size_t al_utf16_width (int c);

size_t al_utf16_encode (uint16_t s[], int32_t c);

ALLEGRO_PATH* al_create_path (const char *str);

ALLEGRO_PATH* al_create_path_for_directory (const char *str);

ALLEGRO_PATH* al_clone_path (const ALLEGRO_PATH *path);

int al_get_path_num_components (const ALLEGRO_PATH *path);

const char* al_get_path_component (const ALLEGRO_PATH *path, int i);

void al_replace_path_component (ALLEGRO_PATH *path, int i, const char *s);

void al_remove_path_component (ALLEGRO_PATH *path, int i);

void al_insert_path_component (ALLEGRO_PATH *path, int i, const char *s);

const char* al_get_path_tail (const ALLEGRO_PATH *path);

void al_drop_path_tail (ALLEGRO_PATH *path);

void al_append_path_component (ALLEGRO_PATH *path, const char *s);

_Bool al_join_paths (ALLEGRO_PATH *path, const ALLEGRO_PATH *tail);

_Bool al_rebase_path (const ALLEGRO_PATH *head, ALLEGRO_PATH *tail);

const char* al_path_cstr (const ALLEGRO_PATH *path, char delim);

const ALLEGRO_USTR* al_path_ustr (const ALLEGRO_PATH *path, char delim);

void al_destroy_path (ALLEGRO_PATH *path);

void al_set_path_drive (ALLEGRO_PATH *path, const char *drive);

const char* al_get_path_drive (const ALLEGRO_PATH *path);

void al_set_path_filename (ALLEGRO_PATH *path, const char *filename);

const char* al_get_path_filename (const ALLEGRO_PATH *path);

const char* al_get_path_extension (const ALLEGRO_PATH *path);

_Bool al_set_path_extension (ALLEGRO_PATH *path, char const *extension);

const char* al_get_path_basename (const ALLEGRO_PATH *path);

_Bool al_make_path_canonical (ALLEGRO_PATH *path);

ALLEGRO_FILE* al_fopen (const char *path, const char *mode);

ALLEGRO_FILE* al_fopen_interface (const ALLEGRO_FILE_INTERFACE *vt, const char *path, const char *mode);

ALLEGRO_FILE* al_create_file_handle (const ALLEGRO_FILE_INTERFACE *vt, void *userdata);

_Bool al_fclose (ALLEGRO_FILE *f);

size_t al_fread (ALLEGRO_FILE *f, void *ptr, size_t size);

size_t al_fwrite (ALLEGRO_FILE *f, const void *ptr, size_t size);

_Bool al_fflush (ALLEGRO_FILE *f);

int64_t al_ftell (ALLEGRO_FILE *f);

_Bool al_fseek (ALLEGRO_FILE *f, int64_t offset, int whence);

_Bool al_feof (ALLEGRO_FILE *f);

int al_ferror (ALLEGRO_FILE *f);

const char * al_ferrmsg (ALLEGRO_FILE *f);

void al_fclearerr (ALLEGRO_FILE *f);

int al_fungetc (ALLEGRO_FILE *f, int c);

int64_t al_fsize (ALLEGRO_FILE *f);

int al_fgetc (ALLEGRO_FILE *f);

int al_fputc (ALLEGRO_FILE *f, int c);

int16_t al_fread16le (ALLEGRO_FILE *f);

int16_t al_fread16be (ALLEGRO_FILE *f);

size_t al_fwrite16le (ALLEGRO_FILE *f, int16_t w);

size_t al_fwrite16be (ALLEGRO_FILE *f, int16_t w);

int32_t al_fread32le (ALLEGRO_FILE *f);

int32_t al_fread32be (ALLEGRO_FILE *f);

size_t al_fwrite32le (ALLEGRO_FILE *f, int32_t l);

size_t al_fwrite32be (ALLEGRO_FILE *f, int32_t l);

char* al_fgets (ALLEGRO_FILE *f, char * const p, size_t max);

ALLEGRO_USTR * al_fget_ustr (ALLEGRO_FILE *f);

int al_fputs (ALLEGRO_FILE *f, const char *p);

int al_fprintf (ALLEGRO_FILE *f, const char *format, ...);

int al_vfprintf (ALLEGRO_FILE *f, const char* format, va_list args);

ALLEGRO_FILE* al_fopen_fd (int fd, const char *mode);

ALLEGRO_FILE* al_make_temp_file (const char *tmpl, ALLEGRO_PATH **ret_path);

ALLEGRO_FILE* al_fopen_slice (ALLEGRO_FILE *fp, size_t initial_size, const char *mode);

const ALLEGRO_FILE_INTERFACE * al_get_new_file_interface (void);

void al_set_new_file_interface (const ALLEGRO_FILE_INTERFACE * file_interface);

void al_set_standard_file_interface (void);

void * al_get_file_userdata (ALLEGRO_FILE *f);

_Bool al_register_bitmap_loader (const char *ext, ALLEGRO_IIO_LOADER_FUNCTION loader);

_Bool al_register_bitmap_saver (const char *ext, ALLEGRO_IIO_SAVER_FUNCTION saver);

_Bool al_register_bitmap_loader_f (const char *ext, ALLEGRO_IIO_FS_LOADER_FUNCTION fs_loader);

_Bool al_register_bitmap_saver_f (const char *ext, ALLEGRO_IIO_FS_SAVER_FUNCTION fs_saver);

_Bool al_register_bitmap_identifier (const char *ext, ALLEGRO_IIO_IDENTIFIER_FUNCTION identifier);

ALLEGRO_BITMAP * al_load_bitmap (const char *filename);

ALLEGRO_BITMAP * al_load_bitmap_flags (const char *filename, int flags);

ALLEGRO_BITMAP * al_load_bitmap_f (ALLEGRO_FILE *fp, const char *ident);

ALLEGRO_BITMAP * al_load_bitmap_flags_f (ALLEGRO_FILE *fp, const char *ident, int flags);

_Bool al_save_bitmap (const char *filename, ALLEGRO_BITMAP *bitmap);

_Bool al_save_bitmap_f (ALLEGRO_FILE *fp, const char *ident, ALLEGRO_BITMAP *bitmap);

char const * al_identify_bitmap_f (ALLEGRO_FILE *fp);

char const * al_identify_bitmap (char const *filename);

ALLEGRO_LOCKED_REGION* al_lock_bitmap (ALLEGRO_BITMAP *bitmap, int format, int flags);

ALLEGRO_LOCKED_REGION* al_lock_bitmap_region (ALLEGRO_BITMAP *bitmap, int x, int y, int width, int height, int format, int flags);

ALLEGRO_LOCKED_REGION* al_lock_bitmap_blocked (ALLEGRO_BITMAP *bitmap, int flags);

ALLEGRO_LOCKED_REGION* al_lock_bitmap_region_blocked (ALLEGRO_BITMAP *bitmap, int x_block, int y_block, int width_block, int height_block, int flags);

void al_unlock_bitmap (ALLEGRO_BITMAP *bitmap);

_Bool al_is_bitmap_locked (ALLEGRO_BITMAP *bitmap);

void al_set_blender (int op, int source, int dest);

void al_set_blend_color (ALLEGRO_COLOR color);

void al_get_blender (int *op, int *source, int *dest);

ALLEGRO_COLOR al_get_blend_color (void);

void al_set_separate_blender (int op, int source, int dest, int alpha_op, int alpha_source, int alpha_dest);

void al_get_separate_blender (int *op, int *source, int *dest, int *alpha_op, int *alpha_src, int *alpha_dest);

void al_init_user_event_source (ALLEGRO_EVENT_SOURCE *);

void al_destroy_user_event_source (ALLEGRO_EVENT_SOURCE *);

_Bool al_emit_user_event (ALLEGRO_EVENT_SOURCE *, ALLEGRO_EVENT *, void (*dtor)(ALLEGRO_USER_EVENT *));

void al_unref_user_event (ALLEGRO_USER_EVENT *);

void al_set_event_source_data (ALLEGRO_EVENT_SOURCE*, intptr_t data);

intptr_t al_get_event_source_data (const ALLEGRO_EVENT_SOURCE*);

ALLEGRO_EVENT_QUEUE* al_create_event_queue (void);

void al_destroy_event_queue (ALLEGRO_EVENT_QUEUE*);

_Bool al_is_event_source_registered (ALLEGRO_EVENT_QUEUE *, ALLEGRO_EVENT_SOURCE *);

void al_register_event_source (ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT_SOURCE*);

void al_unregister_event_source (ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT_SOURCE*);

void al_pause_event_queue (ALLEGRO_EVENT_QUEUE*,_Bool );

_Bool al_is_event_queue_paused (const ALLEGRO_EVENT_QUEUE*);

_Bool al_is_event_queue_empty (ALLEGRO_EVENT_QUEUE*);

_Bool al_get_next_event (ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT *ret_event);

_Bool al_peek_next_event (ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT *ret_event);

_Bool al_drop_next_event (ALLEGRO_EVENT_QUEUE*);

void al_flush_event_queue (ALLEGRO_EVENT_QUEUE*);

void al_wait_for_event (ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT *ret_event);

_Bool al_wait_for_event_timed (ALLEGRO_EVENT_QUEUE*, ALLEGRO_EVENT *ret_event, float secs);

_Bool al_wait_for_event_until (ALLEGRO_EVENT_QUEUE *queue, ALLEGRO_EVENT *ret_event, ALLEGRO_TIMEOUT *timeout);

void al_set_new_display_refresh_rate (int refresh_rate);

void al_set_new_display_flags (int flags);

int al_get_new_display_refresh_rate (void);

int al_get_new_display_flags (void);

void al_set_new_window_title (const char *title);

const char * al_get_new_window_title (void);

int al_get_display_width (ALLEGRO_DISPLAY *display);

int al_get_display_height (ALLEGRO_DISPLAY *display);

int al_get_display_format (ALLEGRO_DISPLAY *display);

int al_get_display_refresh_rate (ALLEGRO_DISPLAY *display);

int al_get_display_flags (ALLEGRO_DISPLAY *display);

int al_get_display_orientation (ALLEGRO_DISPLAY* display);

_Bool al_set_display_flag (ALLEGRO_DISPLAY *display, int flag,_Bool onoff);

ALLEGRO_DISPLAY* al_create_display (int w, int h);

void al_destroy_display (ALLEGRO_DISPLAY *display);

ALLEGRO_DISPLAY* al_get_current_display (void);

void al_set_target_bitmap (ALLEGRO_BITMAP *bitmap);

void al_set_target_backbuffer (ALLEGRO_DISPLAY *display);

ALLEGRO_BITMAP* al_get_backbuffer (ALLEGRO_DISPLAY *display);

ALLEGRO_BITMAP* al_get_target_bitmap (void);

_Bool al_acknowledge_resize (ALLEGRO_DISPLAY *display);

_Bool al_resize_display (ALLEGRO_DISPLAY *display, int width, int height);

void al_flip_display (void);

void al_update_display_region (int x, int y, int width, int height);

_Bool al_is_compatible_bitmap (ALLEGRO_BITMAP *bitmap);

_Bool al_wait_for_vsync (void);

ALLEGRO_EVENT_SOURCE * al_get_display_event_source (ALLEGRO_DISPLAY *display);

void al_set_display_icon (ALLEGRO_DISPLAY *display, ALLEGRO_BITMAP *icon);

void al_set_display_icons (ALLEGRO_DISPLAY *display, int num_icons, ALLEGRO_BITMAP *icons[]);

int al_get_new_display_adapter (void);

void al_set_new_display_adapter (int adapter);

void al_set_new_window_position (int x, int y);

void al_get_new_window_position (int *x, int *y);

void al_set_window_position (ALLEGRO_DISPLAY *display, int x, int y);

void al_get_window_position (ALLEGRO_DISPLAY *display, int *x, int *y);

_Bool al_set_window_constraints (ALLEGRO_DISPLAY *display, int min_w, int min_h, int max_w, int max_h);

_Bool al_get_window_constraints (ALLEGRO_DISPLAY *display, int *min_w, int *min_h, int *max_w, int *max_h);

void al_apply_window_constraints (ALLEGRO_DISPLAY *display,_Bool onoff);

void al_set_window_title (ALLEGRO_DISPLAY *display, const char *title);

void al_set_new_display_option (int option, int value, int importance);

int al_get_new_display_option (int option, int *importance);

void al_reset_new_display_options (void);

void al_set_display_option (ALLEGRO_DISPLAY *display, int option, int value);

int al_get_display_option (ALLEGRO_DISPLAY *display, int option);

void al_hold_bitmap_drawing (_Bool hold);

_Bool al_is_bitmap_drawing_held (void);

void al_acknowledge_drawing_halt (ALLEGRO_DISPLAY *display);

void al_acknowledge_drawing_resume (ALLEGRO_DISPLAY *display);

char * al_get_clipboard_text (ALLEGRO_DISPLAY *display);

_Bool al_set_clipboard_text (ALLEGRO_DISPLAY *display, const char *text);

_Bool al_clipboard_has_text (ALLEGRO_DISPLAY *display);

ALLEGRO_CONFIG * al_create_config (void);

void al_add_config_section (ALLEGRO_CONFIG *config, const char *name);

void al_set_config_value (ALLEGRO_CONFIG *config, const char *section, const char *key, const char *value);

void al_add_config_comment (ALLEGRO_CONFIG *config, const char *section, const char *comment);

const char* al_get_config_value (const ALLEGRO_CONFIG *config, const char *section, const char *key);

ALLEGRO_CONFIG* al_load_config_file (const char *filename);

ALLEGRO_CONFIG* al_load_config_file_f (ALLEGRO_FILE *filename);

_Bool al_save_config_file (const char *filename, const ALLEGRO_CONFIG *config);

_Bool al_save_config_file_f (ALLEGRO_FILE *file, const ALLEGRO_CONFIG *config);

void al_merge_config_into (ALLEGRO_CONFIG *master, const ALLEGRO_CONFIG *add);

ALLEGRO_CONFIG * al_merge_config (const ALLEGRO_CONFIG *cfg1, const ALLEGRO_CONFIG *cfg2);

void al_destroy_config (ALLEGRO_CONFIG *config);

_Bool al_remove_config_section (ALLEGRO_CONFIG *config, char const *section);

_Bool al_remove_config_key (ALLEGRO_CONFIG *config, char const *section, char const *key);

char const * al_get_first_config_section (ALLEGRO_CONFIG const *config, ALLEGRO_CONFIG_SECTION **iterator);

char const * al_get_next_config_section (ALLEGRO_CONFIG_SECTION **iterator);

char const * al_get_first_config_entry (ALLEGRO_CONFIG const *config, char const *section, ALLEGRO_CONFIG_ENTRY **iterator);

char const * al_get_next_config_entry (ALLEGRO_CONFIG_ENTRY **iterator);

int al_get_cpu_count (void);

int al_get_ram_size (void);

_Bool _al_trace_prefix (char const *channel, int level, char const *file, int line, char const *function);

void _al_trace_suffix (const char *msg, ...) __attribute__ ((format (printf, 1, 2)));

extern void (*_al_user_assert_handler) (char const *expr, char const *file, int line, char const *func);

void al_register_assert_handler (void (*handler)(char const *expr, char const *file, int line, char const *func));

void al_register_trace_handler (void (*handler)(char const *));

void al_clear_to_color (ALLEGRO_COLOR color);

void al_clear_depth_buffer (float x);

void al_draw_pixel (float x, float y, ALLEGRO_COLOR color);

int al_get_errno (void);

void al_set_errno (int errnum);

al_fixed al_fixsqrt (al_fixed x);

al_fixed al_fixhypot (al_fixed x, al_fixed y);

al_fixed al_fixatan (al_fixed x);

al_fixed al_fixatan2 (al_fixed y, al_fixed x);

extern __inline__ __attribute__((__gnu_inline__)) al_fixed al_ftofix (double x);

ALLEGRO_FS_ENTRY * al_create_fs_entry (const char *path);

void al_destroy_fs_entry (ALLEGRO_FS_ENTRY *e);

const char * al_get_fs_entry_name (ALLEGRO_FS_ENTRY *e);

_Bool al_update_fs_entry (ALLEGRO_FS_ENTRY *e);

uint32_t al_get_fs_entry_mode (ALLEGRO_FS_ENTRY *e);

time_t al_get_fs_entry_atime (ALLEGRO_FS_ENTRY *e);

time_t al_get_fs_entry_mtime (ALLEGRO_FS_ENTRY *e);

time_t al_get_fs_entry_ctime (ALLEGRO_FS_ENTRY *e);

off_t al_get_fs_entry_size (ALLEGRO_FS_ENTRY *e);

_Bool al_fs_entry_exists (ALLEGRO_FS_ENTRY *e);

_Bool al_remove_fs_entry (ALLEGRO_FS_ENTRY *e);

_Bool al_open_directory (ALLEGRO_FS_ENTRY *e);

ALLEGRO_FS_ENTRY * al_read_directory (ALLEGRO_FS_ENTRY *e);

_Bool al_close_directory (ALLEGRO_FS_ENTRY *e);

_Bool al_filename_exists (const char *path);

_Bool al_remove_filename (const char *path);

char * al_get_current_directory (void);

_Bool al_change_directory (const char *path);

_Bool al_make_directory (const char *path);

ALLEGRO_FILE * al_open_fs_entry (ALLEGRO_FS_ENTRY *e, const char *mode);

int al_for_each_fs_entry (ALLEGRO_FS_ENTRY *dir, int (*callback)(ALLEGRO_FS_ENTRY *entry, void *extra), void *extra);

const ALLEGRO_FS_INTERFACE * al_get_fs_interface (void);

void al_set_fs_interface (const ALLEGRO_FS_INTERFACE *vtable);

void al_set_standard_fs_interface (void);

int al_get_num_display_modes (void);

ALLEGRO_DISPLAY_MODE* al_get_display_mode (int index, ALLEGRO_DISPLAY_MODE *mode);

_Bool al_install_joystick (void);

void al_uninstall_joystick (void);

_Bool al_is_joystick_installed (void);

_Bool al_reconfigure_joysticks (void);

int al_get_num_joysticks (void);

ALLEGRO_JOYSTICK * al_get_joystick (int joyn);

void al_release_joystick (ALLEGRO_JOYSTICK *);

_Bool al_get_joystick_active (ALLEGRO_JOYSTICK *);

const char* al_get_joystick_name (ALLEGRO_JOYSTICK *);

int al_get_joystick_num_sticks (ALLEGRO_JOYSTICK *);

int al_get_joystick_stick_flags (ALLEGRO_JOYSTICK *, int stick);

const char* al_get_joystick_stick_name (ALLEGRO_JOYSTICK *, int stick);

int al_get_joystick_num_axes (ALLEGRO_JOYSTICK *, int stick);

const char* al_get_joystick_axis_name (ALLEGRO_JOYSTICK *, int stick, int axis);

int al_get_joystick_num_buttons (ALLEGRO_JOYSTICK *);

const char* al_get_joystick_button_name (ALLEGRO_JOYSTICK *, int buttonn);

void al_get_joystick_state (ALLEGRO_JOYSTICK *, ALLEGRO_JOYSTICK_STATE *ret_state);

ALLEGRO_EVENT_SOURCE * al_get_joystick_event_source (void);

_Bool al_is_keyboard_installed (void);

_Bool al_install_keyboard (void);

void al_uninstall_keyboard (void);

_Bool al_can_set_keyboard_leds (void);

_Bool al_set_keyboard_leds (int leds);

const char * al_keycode_to_name (int keycode);

void al_get_keyboard_state (ALLEGRO_KEYBOARD_STATE *ret_state);

_Bool al_key_down (const ALLEGRO_KEYBOARD_STATE *, int keycode);

ALLEGRO_EVENT_SOURCE * al_get_keyboard_event_source (void);

_Bool al_is_mouse_installed (void);

_Bool al_install_mouse (void);

void al_uninstall_mouse (void);

unsigned int al_get_mouse_num_buttons (void);

unsigned int al_get_mouse_num_axes (void);

_Bool al_set_mouse_xy (struct ALLEGRO_DISPLAY *display, int x, int y);

_Bool al_set_mouse_z (int z);

_Bool al_set_mouse_w (int w);

_Bool al_set_mouse_axis (int axis, int value);

void al_get_mouse_state (ALLEGRO_MOUSE_STATE *ret_state);

_Bool al_mouse_button_down (const ALLEGRO_MOUSE_STATE *state, int button);

int al_get_mouse_state_axis (const ALLEGRO_MOUSE_STATE *state, int axis);

_Bool al_can_get_mouse_cursor_position (void);

_Bool al_get_mouse_cursor_position (int *ret_x, int *ret_y);

_Bool al_grab_mouse (struct ALLEGRO_DISPLAY *display);

_Bool al_ungrab_mouse (void);

void al_set_mouse_wheel_precision (int precision);

int al_get_mouse_wheel_precision (void);

ALLEGRO_EVENT_SOURCE * al_get_mouse_event_source (void);

_Bool al_is_touch_input_installed (void);

_Bool al_install_touch_input (void);

void al_uninstall_touch_input (void);

void al_get_touch_input_state (ALLEGRO_TOUCH_INPUT_STATE *ret_state);

ALLEGRO_EVENT_SOURCE * al_get_touch_input_event_source (void);

void al_set_memory_interface (ALLEGRO_MEMORY_INTERFACE *iface);

void * al_malloc_with_context (size_t n, int line, const char *file, const char *func);

void al_free_with_context (void *ptr, int line, const char *file, const char *func);

void * al_realloc_with_context (void *ptr, size_t n, int line, const char *file, const char *func);

void * al_calloc_with_context (size_t count, size_t n, int line, const char *file, const char *func);

int al_get_num_video_adapters (void);

_Bool al_get_monitor_info (int adapter, ALLEGRO_MONITOR_INFO *info);

int al_get_monitor_dpi (int adapter);

ALLEGRO_MOUSE_CURSOR * al_create_mouse_cursor ( struct ALLEGRO_BITMAP *sprite, int xfocus, int yfocus);

void al_destroy_mouse_cursor (ALLEGRO_MOUSE_CURSOR *);

_Bool al_set_mouse_cursor (struct ALLEGRO_DISPLAY *display, ALLEGRO_MOUSE_CURSOR *cursor);

_Bool al_set_system_mouse_cursor (struct ALLEGRO_DISPLAY *display, ALLEGRO_SYSTEM_MOUSE_CURSOR cursor_id);

_Bool al_show_mouse_cursor (struct ALLEGRO_DISPLAY *display);

_Bool al_hide_mouse_cursor (struct ALLEGRO_DISPLAY *display);

void al_set_render_state (ALLEGRO_RENDER_STATE state, int value);

void al_use_transform (const ALLEGRO_TRANSFORM* trans);

void al_use_projection_transform (const ALLEGRO_TRANSFORM* trans);

void al_copy_transform (ALLEGRO_TRANSFORM* dest, const ALLEGRO_TRANSFORM* src);

void al_identity_transform (ALLEGRO_TRANSFORM* trans);

void al_build_transform (ALLEGRO_TRANSFORM* trans, float x, float y, float sx, float sy, float theta);

void al_build_camera_transform (ALLEGRO_TRANSFORM *trans, float position_x, float position_y, float position_z, float look_x, float look_y, float look_z, float up_x, float up_y, float up_z);

void al_translate_transform (ALLEGRO_TRANSFORM* trans, float x, float y);

void al_translate_transform_3d (ALLEGRO_TRANSFORM *trans, float x, float y, float z);

void al_rotate_transform (ALLEGRO_TRANSFORM* trans, float theta);

void al_rotate_transform_3d (ALLEGRO_TRANSFORM *trans, float x, float y, float z, float angle);

void al_scale_transform (ALLEGRO_TRANSFORM* trans, float sx, float sy);

void al_scale_transform_3d (ALLEGRO_TRANSFORM *trans, float sx, float sy, float sz);

void al_transform_coordinates (const ALLEGRO_TRANSFORM* trans, float* x, float* y);

void al_transform_coordinates_3d (const ALLEGRO_TRANSFORM *trans, float *x, float *y, float *z);

void al_transform_coordinates_4d (const ALLEGRO_TRANSFORM *trans, float *x, float *y, float *z, float *w);

void al_transform_coordinates_3d_projective (const ALLEGRO_TRANSFORM *trans, float *x, float *y, float *z);

void al_compose_transform (ALLEGRO_TRANSFORM* trans, const ALLEGRO_TRANSFORM* other);

const ALLEGRO_TRANSFORM* al_get_current_transform (void);

const ALLEGRO_TRANSFORM* al_get_current_inverse_transform (void);

const ALLEGRO_TRANSFORM * al_get_current_projection_transform (void);

void al_invert_transform (ALLEGRO_TRANSFORM *trans);

void al_transpose_transform (ALLEGRO_TRANSFORM *trans);

int al_check_inverse (const ALLEGRO_TRANSFORM *trans, float tol);

void al_orthographic_transform (ALLEGRO_TRANSFORM *trans, float left, float top, float n, float right, float bottom, float f);

void al_perspective_transform (ALLEGRO_TRANSFORM *trans, float left, float top, float n, float right, float bottom, float f);

void al_horizontal_shear_transform (ALLEGRO_TRANSFORM *trans, float theta);

void al_vertical_shear_transform (ALLEGRO_TRANSFORM *trans, float theta);

ALLEGRO_SHADER * al_create_shader (ALLEGRO_SHADER_PLATFORM platform);

_Bool al_attach_shader_source (ALLEGRO_SHADER *shader, ALLEGRO_SHADER_TYPE type, const char *source);

_Bool al_attach_shader_source_file (ALLEGRO_SHADER *shader, ALLEGRO_SHADER_TYPE type, const char *filename);

_Bool al_build_shader (ALLEGRO_SHADER *shader);

const char * al_get_shader_log (ALLEGRO_SHADER *shader);

ALLEGRO_SHADER_PLATFORM al_get_shader_platform (ALLEGRO_SHADER *shader);

_Bool al_use_shader (ALLEGRO_SHADER *shader);

ALLEGRO_SHADER * al_get_current_shader (void);

void al_destroy_shader (ALLEGRO_SHADER *shader);

_Bool al_set_shader_sampler (const char *name, ALLEGRO_BITMAP *bitmap, int unit);

_Bool al_set_shader_matrix (const char *name, const ALLEGRO_TRANSFORM *matrix);

_Bool al_set_shader_int (const char *name, int i);

_Bool al_set_shader_float (const char *name, float f);

_Bool al_set_shader_int_vector (const char *name, int num_components, const int *i, int num_elems);

_Bool al_set_shader_float_vector (const char *name, int num_components, const float *f, int num_elems);

_Bool al_set_shader_bool (const char *name,_Bool b);

char const * al_get_default_shader_source (ALLEGRO_SHADER_PLATFORM platform, ALLEGRO_SHADER_TYPE type);

_Bool al_install_system (int version, int (*atexit_ptr)(void (*)(void)));

void al_uninstall_system (void);

_Bool al_is_system_installed (void);

ALLEGRO_SYSTEM * al_get_system_driver (void);

ALLEGRO_CONFIG * al_get_system_config (void);

ALLEGRO_SYSTEM_ID al_get_system_id (void);

ALLEGRO_PATH * al_get_standard_path (int id);

void al_set_exe_name (char const *path);

void al_set_org_name (const char *org_name);

void al_set_app_name (const char *app_name);

const char * al_get_org_name (void);

const char * al_get_app_name (void);

_Bool al_inhibit_screensaver (_Bool inhibit);

ALLEGRO_THREAD * al_create_thread (void *(*proc)(ALLEGRO_THREAD *thread, void *arg), void *arg);

void al_start_thread (ALLEGRO_THREAD *outer);

void al_join_thread (ALLEGRO_THREAD *outer, void **ret_value);

void al_set_thread_should_stop (ALLEGRO_THREAD *outer);

_Bool al_get_thread_should_stop (ALLEGRO_THREAD *outer);

void al_destroy_thread (ALLEGRO_THREAD *thread);

void al_run_detached_thread (void *(*proc)(void *arg), void *arg);

ALLEGRO_MUTEX * al_create_mutex (void);

ALLEGRO_MUTEX * al_create_mutex_recursive (void);

void al_lock_mutex (ALLEGRO_MUTEX *mutex);

void al_unlock_mutex (ALLEGRO_MUTEX *mutex);

void al_destroy_mutex (ALLEGRO_MUTEX *mutex);

ALLEGRO_COND * al_create_cond (void);

void al_destroy_cond (ALLEGRO_COND *cond);

void al_wait_cond (ALLEGRO_COND *cond, ALLEGRO_MUTEX *mutex);

int al_wait_cond_until (ALLEGRO_COND *cond, ALLEGRO_MUTEX *mutex, const ALLEGRO_TIMEOUT *timeout);

void al_broadcast_cond (ALLEGRO_COND *cond);

void al_signal_cond (ALLEGRO_COND *cond);

ALLEGRO_TIMER* al_create_timer (double speed_secs);

void al_destroy_timer (ALLEGRO_TIMER *timer);

void al_start_timer (ALLEGRO_TIMER *timer);

void al_stop_timer (ALLEGRO_TIMER *timer);

void al_resume_timer (ALLEGRO_TIMER *timer);

_Bool al_get_timer_started (const ALLEGRO_TIMER *timer);

double al_get_timer_speed (const ALLEGRO_TIMER *timer);

void al_set_timer_speed (ALLEGRO_TIMER *timer, double speed_secs);

int64_t al_get_timer_count (const ALLEGRO_TIMER *timer);

void al_set_timer_count (ALLEGRO_TIMER *timer, int64_t count);

void al_add_timer_count (ALLEGRO_TIMER *timer, int64_t diff);

ALLEGRO_EVENT_SOURCE * al_get_timer_event_source (ALLEGRO_TIMER *timer);

void al_store_state (ALLEGRO_STATE *state, int flags);

void al_restore_state (ALLEGRO_STATE const *state);

ALLEGRO_SAMPLE * al_create_sample (void *buf, unsigned int samples, unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf,_Bool free_buf);

void al_destroy_sample (ALLEGRO_SAMPLE *spl);

ALLEGRO_SAMPLE_INSTANCE* al_create_sample_instance ( ALLEGRO_SAMPLE *data);

void al_destroy_sample_instance ( ALLEGRO_SAMPLE_INSTANCE *spl);

unsigned int al_get_sample_frequency (const ALLEGRO_SAMPLE *spl);

unsigned int al_get_sample_length (const ALLEGRO_SAMPLE *spl);

ALLEGRO_AUDIO_DEPTH al_get_sample_depth (const ALLEGRO_SAMPLE *spl);

ALLEGRO_CHANNEL_CONF al_get_sample_channels (const ALLEGRO_SAMPLE *spl);

void * al_get_sample_data (const ALLEGRO_SAMPLE *spl);

unsigned int al_get_sample_instance_frequency (const ALLEGRO_SAMPLE_INSTANCE *spl);

unsigned int al_get_sample_instance_length (const ALLEGRO_SAMPLE_INSTANCE *spl);

unsigned int al_get_sample_instance_position (const ALLEGRO_SAMPLE_INSTANCE *spl);

float al_get_sample_instance_speed (const ALLEGRO_SAMPLE_INSTANCE *spl);

float al_get_sample_instance_gain (const ALLEGRO_SAMPLE_INSTANCE *spl);

float al_get_sample_instance_pan (const ALLEGRO_SAMPLE_INSTANCE *spl);

float al_get_sample_instance_time (const ALLEGRO_SAMPLE_INSTANCE *spl);

ALLEGRO_AUDIO_DEPTH al_get_sample_instance_depth (const ALLEGRO_SAMPLE_INSTANCE *spl);

ALLEGRO_CHANNEL_CONF al_get_sample_instance_channels (const ALLEGRO_SAMPLE_INSTANCE *spl);

ALLEGRO_PLAYMODE al_get_sample_instance_playmode (const ALLEGRO_SAMPLE_INSTANCE *spl);

_Bool al_get_sample_instance_playing (const ALLEGRO_SAMPLE_INSTANCE *spl);

_Bool al_get_sample_instance_attached (const ALLEGRO_SAMPLE_INSTANCE *spl);

_Bool al_set_sample_instance_position (ALLEGRO_SAMPLE_INSTANCE *spl, unsigned int val);

_Bool al_set_sample_instance_length (ALLEGRO_SAMPLE_INSTANCE *spl, unsigned int val);

_Bool al_set_sample_instance_speed (ALLEGRO_SAMPLE_INSTANCE *spl, float val);

_Bool al_set_sample_instance_gain (ALLEGRO_SAMPLE_INSTANCE *spl, float val);

_Bool al_set_sample_instance_pan (ALLEGRO_SAMPLE_INSTANCE *spl, float val);

_Bool al_set_sample_instance_playmode (ALLEGRO_SAMPLE_INSTANCE *spl, ALLEGRO_PLAYMODE val);

_Bool al_set_sample_instance_playing (ALLEGRO_SAMPLE_INSTANCE *spl,_Bool val);

_Bool al_detach_sample_instance (ALLEGRO_SAMPLE_INSTANCE *spl);

_Bool al_set_sample (ALLEGRO_SAMPLE_INSTANCE *spl, ALLEGRO_SAMPLE *data);

ALLEGRO_SAMPLE * al_get_sample (ALLEGRO_SAMPLE_INSTANCE *spl);

_Bool al_play_sample_instance (ALLEGRO_SAMPLE_INSTANCE *spl);

_Bool al_stop_sample_instance (ALLEGRO_SAMPLE_INSTANCE *spl);

ALLEGRO_AUDIO_STREAM* al_create_audio_stream (size_t buffer_count, unsigned int samples, unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf);

void al_destroy_audio_stream (ALLEGRO_AUDIO_STREAM *stream);

void al_drain_audio_stream (ALLEGRO_AUDIO_STREAM *stream);

unsigned int al_get_audio_stream_frequency (const ALLEGRO_AUDIO_STREAM *stream);

unsigned int al_get_audio_stream_length (const ALLEGRO_AUDIO_STREAM *stream);

unsigned int al_get_audio_stream_fragments (const ALLEGRO_AUDIO_STREAM *stream);

unsigned int al_get_available_audio_stream_fragments (const ALLEGRO_AUDIO_STREAM *stream);

float al_get_audio_stream_speed (const ALLEGRO_AUDIO_STREAM *stream);

float al_get_audio_stream_gain (const ALLEGRO_AUDIO_STREAM *stream);

float al_get_audio_stream_pan (const ALLEGRO_AUDIO_STREAM *stream);

ALLEGRO_CHANNEL_CONF al_get_audio_stream_channels (const ALLEGRO_AUDIO_STREAM *stream);

ALLEGRO_AUDIO_DEPTH al_get_audio_stream_depth (const ALLEGRO_AUDIO_STREAM *stream);

ALLEGRO_PLAYMODE al_get_audio_stream_playmode (const ALLEGRO_AUDIO_STREAM *stream);

_Bool al_get_audio_stream_playing (const ALLEGRO_AUDIO_STREAM *spl);

_Bool al_get_audio_stream_attached (const ALLEGRO_AUDIO_STREAM *spl);

uint64_t al_get_audio_stream_played_samples (const ALLEGRO_AUDIO_STREAM *stream);

void * al_get_audio_stream_fragment (const ALLEGRO_AUDIO_STREAM *stream);

_Bool al_set_audio_stream_speed (ALLEGRO_AUDIO_STREAM *stream, float val);

_Bool al_set_audio_stream_gain (ALLEGRO_AUDIO_STREAM *stream, float val);

_Bool al_set_audio_stream_pan (ALLEGRO_AUDIO_STREAM *stream, float val);

_Bool al_set_audio_stream_playmode (ALLEGRO_AUDIO_STREAM *stream, ALLEGRO_PLAYMODE val);

_Bool al_set_audio_stream_playing (ALLEGRO_AUDIO_STREAM *stream,_Bool val);

_Bool al_detach_audio_stream (ALLEGRO_AUDIO_STREAM *stream);

_Bool al_set_audio_stream_fragment (ALLEGRO_AUDIO_STREAM *stream, void *val);

_Bool al_rewind_audio_stream (ALLEGRO_AUDIO_STREAM *stream);

_Bool al_seek_audio_stream_secs (ALLEGRO_AUDIO_STREAM *stream, double time);

double al_get_audio_stream_position_secs (ALLEGRO_AUDIO_STREAM *stream);

double al_get_audio_stream_length_secs (ALLEGRO_AUDIO_STREAM *stream);

_Bool al_set_audio_stream_loop_secs (ALLEGRO_AUDIO_STREAM *stream, double start, double end);

ALLEGRO_EVENT_SOURCE * al_get_audio_stream_event_source (ALLEGRO_AUDIO_STREAM *stream);

ALLEGRO_MIXER* al_create_mixer (unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf);

void al_destroy_mixer (ALLEGRO_MIXER *mixer);

_Bool al_attach_sample_instance_to_mixer ( ALLEGRO_SAMPLE_INSTANCE *stream, ALLEGRO_MIXER *mixer);

_Bool al_attach_audio_stream_to_mixer (ALLEGRO_AUDIO_STREAM *stream, ALLEGRO_MIXER *mixer);

_Bool al_attach_mixer_to_mixer (ALLEGRO_MIXER *stream, ALLEGRO_MIXER *mixer);

_Bool al_set_mixer_postprocess_callback ( ALLEGRO_MIXER *mixer, void (*cb)(void *buf, unsigned int samples, void *data), void *data);

unsigned int al_get_mixer_frequency (const ALLEGRO_MIXER *mixer);

ALLEGRO_CHANNEL_CONF al_get_mixer_channels (const ALLEGRO_MIXER *mixer);

ALLEGRO_AUDIO_DEPTH al_get_mixer_depth (const ALLEGRO_MIXER *mixer);

ALLEGRO_MIXER_QUALITY al_get_mixer_quality (const ALLEGRO_MIXER *mixer);

float al_get_mixer_gain (const ALLEGRO_MIXER *mixer);

_Bool al_get_mixer_playing (const ALLEGRO_MIXER *mixer);

_Bool al_get_mixer_attached (const ALLEGRO_MIXER *mixer);

_Bool al_mixer_has_attachments (const ALLEGRO_MIXER *mixer);

_Bool al_set_mixer_frequency (ALLEGRO_MIXER *mixer, unsigned int val);

_Bool al_set_mixer_quality (ALLEGRO_MIXER *mixer, ALLEGRO_MIXER_QUALITY val);

_Bool al_set_mixer_gain (ALLEGRO_MIXER *mixer, float gain);

_Bool al_set_mixer_playing (ALLEGRO_MIXER *mixer,_Bool val);

_Bool al_detach_mixer (ALLEGRO_MIXER *mixer);

ALLEGRO_VOICE* al_create_voice (unsigned int freq, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf);

void al_destroy_voice (ALLEGRO_VOICE *voice);

_Bool al_attach_sample_instance_to_voice ( ALLEGRO_SAMPLE_INSTANCE *stream, ALLEGRO_VOICE *voice);

_Bool al_attach_audio_stream_to_voice ( ALLEGRO_AUDIO_STREAM *stream, ALLEGRO_VOICE *voice );

_Bool al_attach_mixer_to_voice (ALLEGRO_MIXER *mixer, ALLEGRO_VOICE *voice);

void al_detach_voice (ALLEGRO_VOICE *voice);

unsigned int al_get_voice_frequency (const ALLEGRO_VOICE *voice);

unsigned int al_get_voice_position (const ALLEGRO_VOICE *voice);

ALLEGRO_CHANNEL_CONF al_get_voice_channels (const ALLEGRO_VOICE *voice);

ALLEGRO_AUDIO_DEPTH al_get_voice_depth (const ALLEGRO_VOICE *voice);

_Bool al_get_voice_playing (const ALLEGRO_VOICE *voice);

_Bool al_voice_has_attachments (const ALLEGRO_VOICE* voice);

_Bool al_set_voice_position (ALLEGRO_VOICE *voice, unsigned int val);

_Bool al_set_voice_playing (ALLEGRO_VOICE *voice,_Bool val);

_Bool al_install_audio (void);

void al_uninstall_audio (void);

_Bool al_is_audio_installed (void);

uint32_t al_get_allegro_audio_version (void);

size_t al_get_channel_count (ALLEGRO_CHANNEL_CONF conf);

size_t al_get_audio_depth_size (ALLEGRO_AUDIO_DEPTH conf);

void al_fill_silence (void *buf, unsigned int samples, ALLEGRO_AUDIO_DEPTH depth, ALLEGRO_CHANNEL_CONF chan_conf);

int al_get_num_audio_output_devices (void);

const ALLEGRO_AUDIO_DEVICE * al_get_audio_output_device (int index);

const char * al_get_audio_device_name (const ALLEGRO_AUDIO_DEVICE * device);

_Bool al_reserve_samples (int reserve_samples);

ALLEGRO_MIXER * al_get_default_mixer (void);

_Bool al_set_default_mixer (ALLEGRO_MIXER *mixer);

_Bool al_restore_default_mixer (void);

_Bool al_play_sample (ALLEGRO_SAMPLE *data, float gain, float pan, float speed, ALLEGRO_PLAYMODE loop, ALLEGRO_SAMPLE_ID *ret_id);

void al_stop_sample (ALLEGRO_SAMPLE_ID *spl_id);

void al_stop_samples (void);

ALLEGRO_VOICE * al_get_default_voice (void);

void al_set_default_voice (ALLEGRO_VOICE *voice);

_Bool al_register_sample_loader (const char *ext, ALLEGRO_SAMPLE *(*loader)(const char *filename));

_Bool al_register_sample_saver (const char *ext,_Bool (*saver)(const char *filename, ALLEGRO_SAMPLE *spl));

_Bool al_register_audio_stream_loader (const char *ext, ALLEGRO_AUDIO_STREAM *(*stream_loader)(const char *filename, size_t buffer_count, unsigned int samples));

_Bool al_register_sample_loader_f (const char *ext, ALLEGRO_SAMPLE *(*loader)(ALLEGRO_FILE *fp));

_Bool al_register_sample_saver_f (const char *ext,_Bool (*saver)(ALLEGRO_FILE *fp, ALLEGRO_SAMPLE *spl));

_Bool al_register_audio_stream_loader_f (const char *ext, ALLEGRO_AUDIO_STREAM *(*stream_loader)(ALLEGRO_FILE *fp, size_t buffer_count, unsigned int samples));

_Bool al_register_sample_identifier (const char *ext,_Bool (*identifier)(ALLEGRO_FILE *fp));

ALLEGRO_SAMPLE * al_load_sample (const char *filename);

_Bool al_save_sample (const char *filename, ALLEGRO_SAMPLE *spl);

ALLEGRO_AUDIO_STREAM * al_load_audio_stream (const char *filename, size_t buffer_count, unsigned int samples);

ALLEGRO_SAMPLE * al_load_sample_f (ALLEGRO_FILE* fp, const char *ident);

_Bool al_save_sample_f (ALLEGRO_FILE* fp, const char *ident, ALLEGRO_SAMPLE *spl);

ALLEGRO_AUDIO_STREAM * al_load_audio_stream_f (ALLEGRO_FILE* fp, const char *ident, size_t buffer_count, unsigned int samples);

char const * al_identify_sample_f (ALLEGRO_FILE *fp);

char const * al_identify_sample (char const *filename);

_Bool al_init_acodec_addon (void);

_Bool al_is_acodec_addon_initialized (void);

uint32_t al_get_allegro_acodec_version (void);

uint32_t al_get_opengl_version (void);

_Bool al_have_opengl_extension (const char *extension);

void* al_get_opengl_proc_address (const char *name);

ALLEGRO_OGL_EXT_LIST* al_get_opengl_extension_list (void);

GLuint al_get_opengl_texture (ALLEGRO_BITMAP *bitmap);

void al_remove_opengl_fbo (ALLEGRO_BITMAP *bitmap);

GLuint al_get_opengl_fbo (ALLEGRO_BITMAP *bitmap);

_Bool al_get_opengl_texture_size (ALLEGRO_BITMAP *bitmap, int *w, int *h);

void al_get_opengl_texture_position (ALLEGRO_BITMAP *bitmap, int *u, int *v);

GLuint al_get_opengl_program_object (ALLEGRO_SHADER *shader);

void al_set_current_opengl_context (ALLEGRO_DISPLAY *display);

int al_get_opengl_variant (void);

_Bool al_register_font_loader (const char *ext, ALLEGRO_FONT *(*load)(const char *filename, int size, int flags));

ALLEGRO_FONT * al_load_bitmap_font (const char *filename);

ALLEGRO_FONT * al_load_bitmap_font_flags (const char *filename, int flags);

ALLEGRO_FONT * al_load_font (const char *filename, int size, int flags);

ALLEGRO_FONT * al_grab_font_from_bitmap (ALLEGRO_BITMAP *bmp, int n, const int ranges[]);

ALLEGRO_FONT * al_create_builtin_font (void);

void al_draw_ustr (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, int flags, ALLEGRO_USTR const *ustr);

void al_draw_text (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, int flags, char const *text);

void al_draw_justified_text (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x1, float x2, float y, float diff, int flags, char const *text);

void al_draw_justified_ustr (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x1, float x2, float y, float diff, int flags, ALLEGRO_USTR const *text);

void al_draw_textf (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, int flags, char const *format, ...) __attribute__ ((format (printf, 6, 7)));

void al_draw_justified_textf (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x1, float x2, float y, float diff, int flags, char const *format, ...) __attribute__ ((format (printf, 8, 9)));

int al_get_text_width (const ALLEGRO_FONT *f, const char *str);

int al_get_ustr_width (const ALLEGRO_FONT *f, const ALLEGRO_USTR *ustr);

int al_get_font_line_height (const ALLEGRO_FONT *f);

int al_get_font_ascent (const ALLEGRO_FONT *f);

int al_get_font_descent (const ALLEGRO_FONT *f);

void al_destroy_font (ALLEGRO_FONT *f);

void al_get_ustr_dimensions (const ALLEGRO_FONT *f, ALLEGRO_USTR const *text, int *bbx, int *bby, int *bbw, int *bbh);

void al_get_text_dimensions (const ALLEGRO_FONT *f, char const *text, int *bbx, int *bby, int *bbw, int *bbh);

_Bool al_init_font_addon (void);

_Bool al_is_font_addon_initialized (void);

void al_shutdown_font_addon (void);

uint32_t al_get_allegro_font_version (void);

int al_get_font_ranges (ALLEGRO_FONT *font, int ranges_count, int *ranges);

void al_draw_glyph (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, int codepoint);

int al_get_glyph_width (const ALLEGRO_FONT *f, int codepoint);

_Bool al_get_glyph_dimensions (const ALLEGRO_FONT *f, int codepoint, int *bbx, int *bby, int *bbw, int *bbh);

int al_get_glyph_advance (const ALLEGRO_FONT *f, int codepoint1, int codepoint2);

void al_draw_multiline_text (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, float max_width, float line_height, int flags, const char *text);

void al_draw_multiline_textf (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, float max_width, float line_height, int flags, const char *format, ...) __attribute__ ((format (printf, 8, 9)));

void al_draw_multiline_ustr (const ALLEGRO_FONT *font, ALLEGRO_COLOR color, float x, float y, float max_width, float line_height, int flags, const ALLEGRO_USTR *text);

void al_do_multiline_text (const ALLEGRO_FONT *font, float max_width, const char *text,_Bool (*cb)(int line_num, const char *line, int size, void *extra), void *extra);

void al_do_multiline_ustr (const ALLEGRO_FONT *font, float max_width, const ALLEGRO_USTR *ustr,_Bool (*cb)(int line_num, const ALLEGRO_USTR *line, void *extra), void *extra);

void al_set_fallback_font (ALLEGRO_FONT *font, ALLEGRO_FONT *fallback);

ALLEGRO_FONT * al_get_fallback_font ( ALLEGRO_FONT *font);

_Bool al_init_native_dialog_addon (void);

_Bool al_is_native_dialog_addon_initialized (void);

void al_shutdown_native_dialog_addon (void);

ALLEGRO_FILECHOOSER * al_create_native_file_dialog (char const *initial_path, char const *title, char const *patterns, int mode);

_Bool al_show_native_file_dialog (ALLEGRO_DISPLAY *display, ALLEGRO_FILECHOOSER *dialog);

int al_get_native_file_dialog_count (const ALLEGRO_FILECHOOSER *dialog);

const char * al_get_native_file_dialog_path (const ALLEGRO_FILECHOOSER *dialog, size_t index);

void al_destroy_native_file_dialog (ALLEGRO_FILECHOOSER *dialog);

int al_show_native_message_box (ALLEGRO_DISPLAY *display, char const *title, char const *heading, char const *text, char const *buttons, int flags);

ALLEGRO_TEXTLOG * al_open_native_text_log (char const *title, int flags);

void al_close_native_text_log (ALLEGRO_TEXTLOG *textlog);

void al_append_native_text_log (ALLEGRO_TEXTLOG *textlog, char const *format, ...);

ALLEGRO_EVENT_SOURCE * al_get_native_text_log_event_source (ALLEGRO_TEXTLOG *textlog);

ALLEGRO_MENU * al_create_menu (void);

ALLEGRO_MENU * al_create_popup_menu (void);

ALLEGRO_MENU * al_build_menu (ALLEGRO_MENU_INFO *info);

int al_append_menu_item (ALLEGRO_MENU *parent, char const *title, uint16_t id, int flags, ALLEGRO_BITMAP *icon, ALLEGRO_MENU *submenu);

int al_insert_menu_item (ALLEGRO_MENU *parent, int pos, char const *title, uint16_t id, int flags, ALLEGRO_BITMAP *icon, ALLEGRO_MENU *submenu);

_Bool al_remove_menu_item (ALLEGRO_MENU *menu, int pos);

ALLEGRO_MENU * al_clone_menu (ALLEGRO_MENU *menu);

ALLEGRO_MENU * al_clone_menu_for_popup (ALLEGRO_MENU *menu);

void al_destroy_menu (ALLEGRO_MENU *menu);

const char * al_get_menu_item_caption (ALLEGRO_MENU *menu, int pos);

void al_set_menu_item_caption (ALLEGRO_MENU *menu, int pos, const char *caption);

int al_get_menu_item_flags (ALLEGRO_MENU *menu, int pos);

void al_set_menu_item_flags (ALLEGRO_MENU *menu, int pos, int flags);

ALLEGRO_BITMAP * al_get_menu_item_icon (ALLEGRO_MENU *menu, int pos);

void al_set_menu_item_icon (ALLEGRO_MENU *menu, int pos, ALLEGRO_BITMAP *icon);

ALLEGRO_MENU * al_find_menu (ALLEGRO_MENU *haystack, uint16_t id);

_Bool al_find_menu_item (ALLEGRO_MENU *haystack, uint16_t id, ALLEGRO_MENU **menu, int *index);

ALLEGRO_EVENT_SOURCE * al_get_default_menu_event_source (void);

ALLEGRO_EVENT_SOURCE * al_enable_menu_event_source (ALLEGRO_MENU *menu);

void al_disable_menu_event_source (ALLEGRO_MENU *menu);

ALLEGRO_MENU * al_get_display_menu (ALLEGRO_DISPLAY *display);

_Bool al_set_display_menu (ALLEGRO_DISPLAY *display, ALLEGRO_MENU *menu);

_Bool al_popup_menu (ALLEGRO_MENU *popup, ALLEGRO_DISPLAY *display);

ALLEGRO_MENU * al_remove_display_menu (ALLEGRO_DISPLAY *display);

uint32_t al_get_allegro_native_dialog_version (void);

uint32_t al_get_allegro_primitives_version (void);

_Bool al_init_primitives_addon (void);

_Bool al_is_primitives_addon_initialized (void);

void al_shutdown_primitives_addon (void);

int al_draw_prim (const void* vtxs, const ALLEGRO_VERTEX_DECL* decl, ALLEGRO_BITMAP* texture, int start, int end, int type);

int al_draw_indexed_prim (const void* vtxs, const ALLEGRO_VERTEX_DECL* decl, ALLEGRO_BITMAP* texture, const int* indices, int num_vtx, int type);

int al_draw_vertex_buffer (ALLEGRO_VERTEX_BUFFER* vertex_buffer, ALLEGRO_BITMAP* texture, int start, int end, int type);

int al_draw_indexed_buffer (ALLEGRO_VERTEX_BUFFER* vertex_buffer, ALLEGRO_BITMAP* texture, ALLEGRO_INDEX_BUFFER* index_buffer, int start, int end, int type);

ALLEGRO_VERTEX_DECL* al_create_vertex_decl (const ALLEGRO_VERTEX_ELEMENT* elements, int stride);

void al_destroy_vertex_decl (ALLEGRO_VERTEX_DECL* decl);

ALLEGRO_VERTEX_BUFFER* al_create_vertex_buffer (ALLEGRO_VERTEX_DECL* decl, const void* initial_data, int num_vertices, int flags);

void al_destroy_vertex_buffer (ALLEGRO_VERTEX_BUFFER* buffer);

void* al_lock_vertex_buffer (ALLEGRO_VERTEX_BUFFER* buffer, int offset, int length, int flags);

void al_unlock_vertex_buffer (ALLEGRO_VERTEX_BUFFER* buffer);

int al_get_vertex_buffer_size (ALLEGRO_VERTEX_BUFFER* buffer);

ALLEGRO_INDEX_BUFFER* al_create_index_buffer (int index_size, const void* initial_data, int num_indices, int flags);

void al_destroy_index_buffer (ALLEGRO_INDEX_BUFFER* buffer);

void* al_lock_index_buffer (ALLEGRO_INDEX_BUFFER* buffer, int offset, int length, int flags);

void al_unlock_index_buffer (ALLEGRO_INDEX_BUFFER* buffer);

int al_get_index_buffer_size (ALLEGRO_INDEX_BUFFER* buffer);

_Bool al_triangulate_polygon (const float* vertices, size_t vertex_stride, const int* vertex_counts, void (*emit_triangle)(int, int, int, void*), void* userdata);

void al_draw_soft_triangle (ALLEGRO_VERTEX* v1, ALLEGRO_VERTEX* v2, ALLEGRO_VERTEX* v3, uintptr_t state, void (*init)(uintptr_t, ALLEGRO_VERTEX*, ALLEGRO_VERTEX*, ALLEGRO_VERTEX*), void (*first)(uintptr_t, int, int, int, int), void (*step)(uintptr_t, int), void (*draw)(uintptr_t, int, int, int));

void al_draw_soft_line (ALLEGRO_VERTEX* v1, ALLEGRO_VERTEX* v2, uintptr_t state, void (*first)(uintptr_t, int, int, ALLEGRO_VERTEX*, ALLEGRO_VERTEX*), void (*step)(uintptr_t, int), void (*draw)(uintptr_t, int, int));

void al_draw_line (float x1, float y1, float x2, float y2, ALLEGRO_COLOR color, float thickness);

void al_draw_triangle (float x1, float y1, float x2, float y2, float x3, float y3, ALLEGRO_COLOR color, float thickness);

void al_draw_rectangle (float x1, float y1, float x2, float y2, ALLEGRO_COLOR color, float thickness);

void al_draw_rounded_rectangle (float x1, float y1, float x2, float y2, float rx, float ry, ALLEGRO_COLOR color, float thickness);

void al_calculate_arc (float* dest, int stride, float cx, float cy, float rx, float ry, float start_theta, float delta_theta, float thickness, int num_points);

void al_draw_circle (float cx, float cy, float r, ALLEGRO_COLOR color, float thickness);

void al_draw_ellipse (float cx, float cy, float rx, float ry, ALLEGRO_COLOR color, float thickness);

void al_draw_arc (float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness);

void al_draw_elliptical_arc (float cx, float cy, float rx, float ry, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness);

void al_draw_pieslice (float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color, float thickness);

void al_calculate_spline (float* dest, int stride, const float points[8], float thickness, int num_segments);

void al_draw_spline (const float points[8], ALLEGRO_COLOR color, float thickness);

void al_calculate_ribbon (float* dest, int dest_stride, const float *points, int points_stride, float thickness, int num_segments);

void al_draw_ribbon (const float *points, int points_stride, ALLEGRO_COLOR color, float thickness, int num_segments);

void al_draw_filled_triangle (float x1, float y1, float x2, float y2, float x3, float y3, ALLEGRO_COLOR color);

void al_draw_filled_rectangle (float x1, float y1, float x2, float y2, ALLEGRO_COLOR color);

void al_draw_filled_ellipse (float cx, float cy, float rx, float ry, ALLEGRO_COLOR color);

void al_draw_filled_circle (float cx, float cy, float r, ALLEGRO_COLOR color);

void al_draw_filled_pieslice (float cx, float cy, float r, float start_theta, float delta_theta, ALLEGRO_COLOR color);

void al_draw_filled_rounded_rectangle (float x1, float y1, float x2, float y2, float rx, float ry, ALLEGRO_COLOR color);

void al_draw_polyline (const float* vertices, int vertex_stride, int vertex_count, int join_style, int cap_style, ALLEGRO_COLOR color, float thickness, float miter_limit);

void al_draw_polygon (const float* vertices, int vertex_count, int join_style, ALLEGRO_COLOR color, float thickness, float miter_limit);

void al_draw_filled_polygon (const float* vertices, int vertex_count, ALLEGRO_COLOR color);

void al_draw_filled_polygon_with_holes (const float* vertices, const int* vertex_counts, ALLEGRO_COLOR color);

ALLEGRO_FONT * al_load_ttf_font (char const *filename, int size, int flags);

ALLEGRO_FONT * al_load_ttf_font_f (ALLEGRO_FILE *file, char const *filename, int size, int flags);

ALLEGRO_FONT * al_load_ttf_font_stretch (char const *filename, int w, int h, int flags);

ALLEGRO_FONT * al_load_ttf_font_stretch_f (ALLEGRO_FILE *file, char const *filename, int w, int h, int flags);

_Bool al_init_ttf_addon (void);

_Bool al_is_ttf_addon_initialized (void);

void al_shutdown_ttf_addon (void);

uint32_t al_get_allegro_ttf_version (void);

uint32_t al_get_allegro_color_version (void);

void al_color_hsv_to_rgb (float hue, float saturation, float value, float *red, float *green, float *blue);

void al_color_rgb_to_hsl (float red, float green, float blue, float *hue, float *saturation, float *lightness);

void al_color_rgb_to_hsv (float red, float green, float blue, float *hue, float *saturation, float *value);

void al_color_hsl_to_rgb (float hue, float saturation, float lightness, float *red, float *green, float *blue);

_Bool al_color_name_to_rgb (char const *name, float *r, float *g, float *b);

const char* al_color_rgb_to_name (float r, float g, float b);

void al_color_cmyk_to_rgb (float cyan, float magenta, float yellow, float key, float *red, float *green, float *blue);

void al_color_rgb_to_cmyk (float red, float green, float blue, float *cyan, float *magenta, float *yellow, float *key);

void al_color_yuv_to_rgb (float y, float u, float v, float *red, float *green, float *blue);

void al_color_rgb_to_yuv (float red, float green, float blue, float *y, float *u, float *v);

void al_color_rgb_to_html (float red, float green, float blue, char *string);

_Bool al_color_html_to_rgb (char const *string, float *red, float *green, float *blue);

ALLEGRO_COLOR al_color_yuv (float y, float u, float v);

ALLEGRO_COLOR al_color_cmyk (float c, float m, float y, float k);

ALLEGRO_COLOR al_color_hsl (float h, float s, float l);

ALLEGRO_COLOR al_color_hsv (float h, float s, float v);

ALLEGRO_COLOR al_color_name (char const *name);

ALLEGRO_COLOR al_color_html (char const *string);

void al_color_xyz_to_rgb (float x, float y, float z, float *red, float *green, float *blue);

void al_color_rgb_to_xyz (float red, float green, float blue, float *x, float *y, float *z);

ALLEGRO_COLOR al_color_xyz (float x, float y, float z);

void al_color_lab_to_rgb (float l, float a, float b, float *red, float *green, float *blue);

void al_color_rgb_to_lab (float red, float green, float blue, float *l, float *a, float *b);

ALLEGRO_COLOR al_color_lab (float l, float a, float b);

void al_color_xyy_to_rgb (float x, float y, float y2, float *red, float *green, float *blue);

void al_color_rgb_to_xyy (float red, float green, float blue, float *x, float *y, float *y2);

ALLEGRO_COLOR al_color_xyy (float x, float y, float y2);

double al_color_distance_ciede2000 (ALLEGRO_COLOR c1, ALLEGRO_COLOR c2);

void al_color_lch_to_rgb (float l, float c, float h, float *red, float *green, float *blue);

void al_color_rgb_to_lch (float red, float green, float blue, float *l, float *c, float *h);

ALLEGRO_COLOR al_color_lch (float l, float c, float h);

_Bool al_is_color_valid (ALLEGRO_COLOR color);

void al_color_oklab_to_rgb (float l, float a, float b, float *red, float *green, float *blue);

void al_color_rgb_to_oklab (float red, float green, float blue, float *l, float *a, float *b);

ALLEGRO_COLOR al_color_oklab (float l, float a, float b);

void al_color_linear_to_rgb (float x, float y, float z, float *red, float *green, float *blue);

void al_color_rgb_to_linear (float red, float green, float blue, float *x, float *y, float *z);

ALLEGRO_COLOR al_color_linear (float r, float g, float b);

ALLEGRO_FILE * al_open_memfile (void *mem, int64_t size, const char *mode);

uint32_t al_get_allegro_memfile_version (void);

_Bool al_init_image_addon (void);

_Bool al_is_image_addon_initialized (void);

void al_shutdown_image_addon (void);

uint32_t al_get_allegro_image_version (void);

void al_set_physfs_file_interface (void);

uint32_t al_get_allegro_physfs_version (void);

ALLEGRO_VIDEO * al_open_video (char const *filename);

void al_close_video (ALLEGRO_VIDEO *video);

void al_start_video (ALLEGRO_VIDEO *video, ALLEGRO_MIXER *mixer);

void al_start_video_with_voice (ALLEGRO_VIDEO *video, ALLEGRO_VOICE *voice);

ALLEGRO_EVENT_SOURCE * al_get_video_event_source (ALLEGRO_VIDEO *video);

void al_set_video_playing (ALLEGRO_VIDEO *video,_Bool playing);

_Bool al_is_video_playing (ALLEGRO_VIDEO *video);

double al_get_video_audio_rate (ALLEGRO_VIDEO *video);

double al_get_video_fps (ALLEGRO_VIDEO *video);

float al_get_video_scaled_width (ALLEGRO_VIDEO *video);

float al_get_video_scaled_height (ALLEGRO_VIDEO *video);

ALLEGRO_BITMAP * al_get_video_frame (ALLEGRO_VIDEO *video);

double al_get_video_position (ALLEGRO_VIDEO *video, ALLEGRO_VIDEO_POSITION_TYPE which);

_Bool al_seek_video (ALLEGRO_VIDEO *video, double pos_in_seconds);

_Bool al_init_video_addon (void);

_Bool al_is_video_addon_initialized (void);

void al_shutdown_video_addon (void);

uint32_t al_get_allegro_video_version (void);

char const * al_identify_video_f (ALLEGRO_FILE *fp);

char const * al_identify_video (char const *filename);

]]

return allegro
    